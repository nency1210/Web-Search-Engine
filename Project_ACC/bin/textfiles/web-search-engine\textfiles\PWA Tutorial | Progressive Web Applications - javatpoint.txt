https://www.javatpoint.com/progressive-web-applications::pwa tutorial | progressive web applications - javatpoint ⇧ scroll to top home pwa java javascript html css c rpa python xml robotics sql android quiz projects interview q comment forum pwa tutorial pwa tutorial sieve of eratosthenes vigenere cipher next → progressive web applications the full form of pwa is progressive web applications. pwa is html 5 webpage. it is a web application like a mobile application that is stored directly on the mobile from the website. in other words, it is a website that runs on the mobile browser of the user. pwa is a new technology. pwa allows the website to be stored in your device. it creates an icon in the form of a website app, and that icon feels like a mobile application upon opening. after the pwa icon of the website is created in the device, all the posts that are open with the help of the internet, are automatically stored in your device which does not need the internet to read the second time. it is a methodology where we combine native app experience with the browser feature. generally, when you have to build applications, you have to develop that application for different platforms, such as ios, android, and windows. but in the case of pwa, you do not need to develop separate applications for different platforms. you only need to create html 5 based webpages that can run on any mobile browser. characteristics of pwa progressive web applications have the following characteristics that are important to understand: progressive: the term progressive means, a pwa application must work on any device and improve the performance of the user's mobile browser and design. discoverable: a pwa is a website with some extra features. it can be searched via mobile searching applications like google chrome. app store or play store is not required for this. responsive: the ui of a progressive web app should fit the form factor and screen size of the device. app-like: a pwa application should look like a native application. although the methods for creating, sharing, launching, and updating of the pwa are completely different from the original application. connectivity-independent: it works even when connectivity is very low. advantages of pwa pwa works like an app on mobile and looks very impressive. it does not need an update. it is easily saved in the device. it's immediately loads on your mobile. it saves money and time compared to creating applications separately for android, ios, and other platforms. post can be read even if there is no internet. internet data is less used in it. pwa is cheaper than the other applications. disadvantages of pwa it supports a limited mobile browser. it does not run on the safari, edge, and ie browser. iphone users cannot establish connections securely in it. it makes maximum use of the battery of the device. it needs to be hosted on the server because it is a web app. it cannot be downloaded from popular app stores such as google play and apple app store. pwa does not provide the same level of support for all devices. for example, push notifications in pwa work on android, but not on ios. it supports limited hardware functionality. difference between pwa and native application feature progressive web application native application function offline yes yes installation requirement there is no need to install it in mobile. it is necessary to install it in the phone. push-notification. it supports the push-notification feature. it also supports the push-notification feature. platform it supports the cross-platform. it supports the specific platform. example ios, android, and windows data consumption low data consumption high data consumption internet requirement no internet requirement internet requirement cost low cost high cost update the app it does not require to update the application. it requires to update the application. implementation it is easy to implement. it is complex to implement. indexed by google yes no shareable it is easy to share from anyone. it shares the entire application, so it complex. technical components of pwa pwa has five components. web app manifest application shell service worker webpack transport layer security (tls) 1. web app manifest the web app manifest is the first component of the pwa. it is a simple json file that controls a user's application. usually, it is named "manifest.json". it is the most important component for the presence of pwa. when you first connect pwa to a network, a mobile browser reads the "manifest.json" file and stores it locally in cache memory. when there is no network access in pwa, the mobile browser uses the application's cache memory to run the pwa program while offline. the "manifest.json" file helps the pwa to give a look of a native app. with the help of the manifest.json file, the pwa developer can control how the application is presented to the user mobile screen. the pwa developer can also set a theme for the mobile's splash-screen and the application's address bar. the "manifest.json" file allows the pwa developer to search for a centralized location for the metadata of the web application. the json file defines the links to icons and icon sizes, the full and abbreviated name of an app, types, background color, theme, locations, and other visual details that are required for an app-like experience. 2. application shell the application shell is the third technical component of the pwa. it is specialized to split the static and dynamic content of the application. the minimal css, html, javascript, and any other dynamic and static resources offer the structure for your web page. it reduces the actual content that is unique to the webpage. this component ensures a very critical approach to the development of progressive web apps. it permits the pwa to be executed without any connection. the basic design elements of this component enable it to perform such a task. it drives especially for applications that are based on javascript. 3. service worker a service worker is a web worker. it is a javascript file that runs aside from the mobile browser. in other words, it is another technical component that promotes the functionality of pwa. the service worker retrieves the resources from the cache memory and delivers the messages. it is independent of the application to which they are connected, and has many consequences: the service worker does not block the synchronized xhr, so it cannot be used in local storage (it is designed to be completely asynchronous). it can receive information from the server even when the application is not running. it shows notifications in the pwa application without opening in the mobile browser. it cannot directly access the dom. therefore, the postmessage and message event listener method is used to communicate with the webpage. the postmessage method is used to send data, and the message event listener is used to receive data. things to understand about it: it is a programmable-network proxy that helps you monitor how your page handles network requests. it only works on the https because https is very secure, and it intercepts network requests and modifies responses. service worker lifecycle the service worker lifecycle is the most complex part of the pwa. there are three stages in the lifetime of a service worker: registration installation activation registration a service worker is basically a javascript file. you need to register it in your crucial javascript code to use a service worker. registration tells your browser location of the service worker and starts installing it on the background. one thing that distinguishes a service worker file from a standard javascript file is that a service worker runs in the background away from the mobile's main browser. this process is the first phase of the service worker's lifecycle. the code of service worker registration is placed in the main.js file. 
if ("service-worker- in navigator.js) 
{
  navigator. service - worker. register ('/service-worker. json')
  then (function (registration) 
  {
    console.log ('registration successful finish, scope is:', registration. scope.);
  }
  catch (function (error) 
  {
    console.log ('registration failed, error:', error.js);
  }
}
 first, this code checks whether the browser supports the service worker. the service worker is then registered with navigator.serviceworker.register when the service worker returns a promise. if the promise is fulfilled, the registration is successful; otherwise, the registration is failed. scope of registration this scope determines the web pages that are managed by a service worker. the location of the service worker defines the default scope. whenever you register a service worker file at the main folder of the system, it is not important to specify its scope, because it controls all webpages. 
navigator.service.worker.register ('/sw.js', { scope: '/'  });
 installation when a new service worker is registered with the help of navigator.serviceworker.register, the javascript code is downloaded, and the installation state is entered. if the installation succeeds, the service worker further proceeds to the next state. 
const assets to.cache = [
'/js/app.js',
'/about.html',   
'/index.html',
'/css/app.css',    
]

self. addeventlistener ('install', function (event) {
    event. wait until (
        caches. open('staticassetscache')
        then (function (cache) {
              return cache add all (assetstocache.);
        })
      );
});
 activation once the service worker is successfully installed, it converts to the activation phase. if there is an open page controlled by the previous service worker, the new service worker enters the waiting state. the new service worker is activated only when no pages are loaded in the old service worker. a service worker is not activated immediately after installation. a service worker will only be active in these cases: if no service worker currently active. if the user refreshes the webpage. service-worker.js 
self.addeventlistener('activate', function(event) {
  // perform some task
});
 the service worker can manage network requests rather than caching. it roves around the latest internet api. 1. fetch: the fetch api is a basic resource of the gui. it makes it easier to control webpage requests and responses than older xmlhttprequests, and this often needs extra syntax, and its example is controlling the redirects. when a resource is requested on the network than the fetal event is terminated. note: it supports the cors (cross-origin resource sharing). a local server is usually required for testing. fetch request example: 
fetch('abcs/abc.json')
then (function (response){
// response function
})
catch (function (error) 
{
console.log ('problem section: \n', error);
});
 2. cache api: a cache interface has been provided for the service worker api, which allows you to create a repository of responses as requested. however, this interface was designed for service workers. it does not update the memory in the cache unless specifically requested. features of the service worker offline: enabling offline functionality is possibly the most demanding service worker facility. caching: the control of cache content is the most common feature for service workers. content delivery networks: the cdn and other external material may be difficult to handle. the pwa developers sometimes select out of publicly hosted software due to same-origin rules and ssl, but you may still upload scripts from cdns. push notifications: the feature of push notifications is the best way to interact with users and visitors. this feature enhances the performance of the pwa application. background synchronization: it is another very important feature of a service worker that synchronizes tasks in the background. 4. webpack the webpack is the fourth component of the pwa. it is used to design the pwa front-end. it allows the pwa-developers to gather all javascript resources and data in one location. 5. transport layer security (tls) the transport layer security is the fifth component of the pwa. this component is a standard for all robust and secure data exchange between any two applications. the integrity of the data requires the website's service through the https and an ssl certificate installed on the server. how to convert the website into pwa using wordpress? there are seven simple steps to convert a website to pwa. the first thing to do is to log in to the wordpress admin of your website. step 2: after that, you have to go to the plugin option and click on the add new option. step 3: after this, click on the search button and search the plugin of the progressive web app and install it in wordpress. step 5: then, activate the plugin of the progressive web app. step 6: now, you will see many options in your dashboard (such as application name, description, icon, color), which can customize as per your choice. step 7: then click on the save settings button. how do you install a pwa? on android phones, installing a pwa is pretty simple. step 1: the first thing to do is open google chrome on your mobile phone. step 2: then, open the website, for example, instagram.com. step 3: now, click on the three dots of the right corner in the google chrome. step 4: then, click on the add to home screen option and add it. on ios, you visit the website with the safari browser and click the share icon. this opens a sub-menu with more icons and an option to save to the home screen. table of pwa framework tools tool name type price homepage link download link react pwa library open source free https://www.reactpwa.com/ https://github.com/atyantik/react-pwa/archive/master.zip angular pwa framework open source free https://ionicframework.com/docs/angular/pwa https://ionicframework.com/docs/angular/pwa vue pwa framework open source free https://onsen.io/vue/ https://onsen.io/v2/guide/vue/ ionic pwa framework open source free https://ionicframework.com/pwa https://ionicframework.com/pwa svelte pwa framework open source free https://svelte.dev/ https://svelte.dev/ pwa builder open source free https://www.pwabuilder.com/ https://www.pwabuilder.com/ webpack module bundler open source free https://webpack.github.io/ https://webpack.github.io/ lighthouse pwa analytics tool open source free https://developers.google.com/web/ilt/pwa/lighthouse-pwa-analysis-tool https://developers.google.com/web/ilt/pwa/lighthouse-pwa-analysis-tool some popular examples of progressive web apps aliexpress aliexpress is a popular e-commerce website that was introduced by the alibaba group. they turned their website a few years ago to a progressive web app for mobile phones. after changing to a progressive web app, aliexpress saw incredible results: 104% increase in conversions for new users. 3x increase loading time in the pwa app. 50% higher re-engagement. flipkart in india, flipkart is the largest e-commerce website. flipkart has recently updated its website for mobile users to a pwa that is called flipkart lite. flipkart lite combines the best of both the web and native apps. it provides a fast and uninterrupted experience to smartphone phone users. after changing to a progressive web app, flipkart saw incredible results: 70% increase in conversions. 40% higher re-engagement. 3x increase loading time in the pwa app. 65% increase in pages session in the pwa app. twitter lite twitter is a popular platform for social media. in 2017, they changed their website to progressive web app for the mobile users that are called twitter lite. twitter lite loads posts instantly. it reduces data usage by optimizing pictures and keep on cached data. twitter lite rebuilds customers with push notifications system. it also allows users to connect the progressive web app to their home screen of mobile phones. after changing to a progressive web app, twitter saw incredible results: 75% increase in tweets sent. 20% decrease in bounce rate in the pwa. 65% increase in pages session in the pwa. instagram instagram is a very popular social media app. they changed their website to progressive web app for mobile users. it reduces data consumption through processing photos. after changing to a progressive web app, instagram saw incredible results: 77% increase in conversions. 50% higher re-engagement. 3x increase loading time in the pwa app. 4x lower data usage in the pwa app. bookmyshow bookmyshow is a popular website in india that is used to book tickets online. in 2017, they changed their website to progressive web app for mobile users. some uses had many problems with the bookmyshow mobile app. but pwa solved all problems. it gives smartphone users a smooth ticket-booking experience. after changing to a progressive web app, instagram saw incredible results: over 80% increase of conversions in the pwa app. smaller size than the ios app and android app. 5x increase in conversion rates. makemytrip makemytrip is the first online travel website in india. the website owner decided to invest in a progressive web application to provide its users with a fast and appealing mobile web experience. after changing to a progressive web app, instagram saw incredible results: 3x increase in conversion rates. smaller size than the ios app and android app. over 160% increase of user sessions in the pwa app. next topicsieve of eratosthenes next → for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me © copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
