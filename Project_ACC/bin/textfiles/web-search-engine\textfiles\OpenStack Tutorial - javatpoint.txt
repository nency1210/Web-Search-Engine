https://www.javatpoint.com/openstack::openstack tutorial - javatpoint â‡§ scroll to top home openstack opencv openpyxl python pygame numpy splunk python cgi python turtle pyspark python pandas cloud computing nlp java sql openstack tutorial openstack tutorial openstack tutorial openstack is a cloud os that is used to control the large pools of computing, storage, and networking resources within a data center. open stack is open-source and free software. this is basically used for cloud computing and deployed as an iaas. in our openstack tutorial, we are going to discuss the following topics - what is cloud computing introduction to openstack components of openstack installation and configuration of openstack openstack architecture how does openstack work openstack vs. aws benefits of openstack compute (nova) block storage (cinder) object storage (swift) shared file systems (manila) networking (neutron) dashboard (horizon) identity service (keystone) image service (glance) data processing service (sahara) future scope conclusion what is cloud computing cloud computing means storing and manipulating programs and data over the internet instead of the hard disk of your computer. this means that, instead of storing the files on a hard drive or local storage unit, we can save the files on a remote database via cloud-based storage. in other words, we can say cloud computing means the delivery of computing services, such as servers, software, networking, analytics, intelligence, and databases over the internet or the cloud. it offers flexible resources, faster innovation, and economics of scale. types of cloud computing three major forms of cloud computing exist. these are: infrastructure as a service (iaas): it is the basic cloud service that offers networking services, load balancers, virtual machines, and firewalls services. it includes a method of providing everything from os to servers and storage via ip-based networking as part of an on-demand service. some common examples of iaas are ibm cloud, aws, and microsoft azure. platform as a service (paas): a cloud computing service that offers an on-demand platform for software application development, management, testing, and distribution. if you use paas services, then you don't have to worry about setting up or maintaining the underlying server, network, storage, and database infrastructure required for the development. example of paas is google app engine, salesforce.com, etc. software as a service (saas): it is a distribution model. through this service, computer applications (web services) are distributed over the internet. users may use a computer or mobile device that has internet connectivity to access saas services. the most common example of a saas is microsoft office 365, which provides productivity and email services. you can visit our cloud computing tutorial to learn about cloud computing. introduction to openstack openstack is a cloud os that is used to control the large pools of computing, storage, and networking resources within a data center. openstack is an open-source and free software platform. this is essentially used and implemented as an iaas for cloud computing. we can call the openstack a software platform that uses pooled virtual resources to create and manage private and public cloud. openstack offers many cloud-related services (such as networking, storage, image services, identity, etc.) by default. this can be handled by users through a web-based dashboard, a restful api, or command-line tools. openstack manages a lot of virtual machines; this permits the usage of physical resources to be reduced. basic principles of openstack open source: under the apache 2.0 license, openstack is coded and published. apache allows the community to use it for free. open design: for the forthcoming update, the development group holds a design summit every 6 months. open development: the developers maintain a source code repository that is freely accessible through projects like the ubuntu linux distribution via entig100s. open community: openstack allows open and transparent documentation for the community. components of openstack major components of openstack are given below: compute (nova): compute is a controller that is used to manage resources in virtualized environments. it handles several virtual machines and other instances that perform computing tasks. object storage (swift): to store and retrieve arbitrary data in the cloud, object storage is used. in swift, it is possible to store the files, objects, backups, images, videos, virtual machines, and other unstructured data. developers may use a special identifier for referring the file and objects in place of the path, which directly points to a file and allows the openstack to manage where to store the files. block storage (cinder): this works in the traditional way of attaching and detaching an external hard drive to the os for its local use. cinder manages to add, remove, create new disk space in the server. this component provides the virtual storage for the virtual machines in the system. networking (neutron): this component is used for networking in openstack. neutron manages all the network-related queries, such as ip address management, routers, subnets, firewalls, vpns, etc. it confirms that all the other components are well connected with the openstack. dashboard (horizon): this is the first component that the user sees in the openstack. horizon is the web ui (user interface) component used to access the other back-end services. through individual api (application programming interface), developers can access the openstack's components, but through the dashboard, system administrators can look at what is going on in the cloud and manage it as per their need. identity service (keystone): it is the central repository of all the users and their permissions for the openstack services they use. this component is used to manage identity services like authorization, authentication, aws styles (amazon web services) logins, token-based systems, and checking the other credentials (username & password). image service (glance): the glance component is used to provide the image services to openstack. here, image service means the images or virtual copies of hard disks. when we plan to deploy a new virtual machine instance, then glance allows us to use these images as templates. glance allows virtual box (vdi), vmware (vmdk, ovf), raw, hyper-v (vhd) and kvm (qcow2) virtual images. telemetry (ceilometer): it is used to meter the usage and report it to openstack's individual users. so basically, telementry provides billing services to openstack's individual users. orchestration (heat): it allows the developers to store the cloud application's necessities as a file so that all-important resources are available in handy. this component organizes many complex applications of the cloud through the templates, via both the local openstack rest api and query api. shared file system (manila): it offers storage of the file to a virtual machine. this component gives an infrastructure for managing and provisioning file shares. elastic map-reduce (sahara): the sahara component offers a simple method to the users to preplanned hadoop clusters by referring to the multiple options such as the hadoop version, cluster topology and hardware details of nodes and some more. installation and configuration of openstack as we know, openstack is an open-source platform. openstack offers many options to install and deploy it through different software distributions. it provides various deployment models. openstack also provides the pre-installed iso images of the openstack platform. to download these pre-installed iso images, click here. here, we will discuss the installation of the openstack using devstack. here, devstack is the best option to install and test openstack on your pc, laptop, or server. devstack installs all the components in one environment. it can be used to set up openstack on a virtual machine (vm) or a single server. we cannot use the devstack for production purposes because sometimes, after reboot, it is almost impossible to bring it up on the last state. devstack will install the following components: compute service - nove image service - glance identity service - keystone, block storage service - cinder openstack dashboard - horizon network service - neutron placement api - placement object storage - swift hardware requirements the following are the hardware requirements for openstack: processor - at least two cores memory - at least 8gb hard drive - at least 60gb nic - at least 2 nics devstack can be installed on the following kind of operating systems: ubuntu 16.04/17.04/18.04 fedora 24/25 debian centos/rhel 7 opensuse ubuntu operating system is the most tested and most reliable option for devstack. installation of openstack in order to install the devstack in a system, first, you have to create a linux vm on your computer (such as using virtualbox or vmware) or remotely in the cloud (such as using aws). the vm must have at least 4gb of memory, and the proper internet connection is also important. here, we are going to use one version of the ubuntu, i.e., 18.04. follow the following steps to install the openstack in your ubuntu virtual machine : step 1: update ubuntu system open the terminal and run the following command to ensure that the system is up to date : 
$ sudo apt update
$ sudo apt -y upgrade
$ sudo apt -y dist-upgrade
 sample output : reboot the system after running the above command. to reboot the system, run the following command : 
$ sudo reboot
 or 
$ init 6
 step 2: create stack user it is important that the devstack must run as a regular user (non-root user) with the sudo enabled. to keep this note in mind, let's create a new user with the name "stack" and assign the sudo permissions or privileges. to create a stack user, run the following command in your terminal: 
$ sudo useradd -s /bin/bash -d /opt/stack -m stack
 output : now, to assign the sudo privileges to the stack user, run the following command : 
$ echo "stack all=(all) nopasswd: all" | sudo tee /etc/sudoers.d/stack
 output : you can switch to the 'stack' user by running the following command: 
$ sudo su - stack
 output : step 3: install the git in most of the ubuntu systems, git comes by default. but if git is missing on your system, then install it by running the following command: 
$ sudo apt install git -y
 sample output : step 4: download openstack once you install the git, use the git command to download the devstack from github. 
$ git clone https://git.openstack.org/openstack-dev/devstack
 output : step 5: create a devstack configuration file first of all, go to the devstack directory by running the following command : 
$ cd devstack
 output : now, create a local.conf file in which you have to enter the four passwords and the host ip address : output : copy the following line of content in the file : 
[[local|localrc]]

# password for keystone, database, rabbitmq and service
admin_password=strongadminsecret
database_password=$admin_password
rabbit_password=$admin_password
service_password=$admin_password

# host ip - to get your server or vm ip, run the 'ip addr' or 'ifconfig' command
host_ip=192.168.56.103
 output : press the esc, then wq to save and then exit from the local.conf file. here, admin_password is the password that we will use to log into the openstack login page. the default username for an openstack is 'admin'. and host_ip is the ip address of your system. to get your server or vm ip, run the 'ifconfig' or 'ip addr' command. step 6 : install openstack with devstack to install and run the openstack, execute the following command : 
$ ./stack.sh
 devstack will install the following components: compute service (nova) image service- glance identity service-keystone, block storage service - cinder openstack dashboard - horizon network service - neutron placement api - placement object storage - swift the installation will take about 10-20 minutes, mostly depends on your internet speed. at the very end of the installation, you will get the host's ip address, url for managing it and the username and password to handle the administrative task. step 7: accessing openstack on a browser copy the horizon url given in the installation output and paste it into your browser : 
http://<ip address>/dashboard
 to login to openstack with the default username - admin or demo and configured password - secret. once you login into the openstack, you will be redirected to the dashboard of openstack. this dashboard screen is called the openstack management web console. step 8: create an instance on the main dashboard screen, you will see the instance's overview. you can also create your own instance in the openstack. instances are nothing but a virtual machine. to create a new virtual machine, click on the instances from the left side of the page. and then click on launch instances. fill in all the required fields. once you fill all the required fields, an instance will create. openstack architecture there are several components that form openstack's architecture. nova (compute) nova is one of the most common and important components of openstack. compute is a controller that is used to handle virtualized environments' resources. it handles several virtual machines and other instances that perform computing tasks. nova is written in python language. vmware, xen, and kvm are the hypervisor technologies that could be used, and this choice is contingent on openstack's version. functionality : the nova-api processes the requests and responses to and from the end-user. when a request is submitted, the nova generates and removes the instances. the nova-scheduler schedules nova-compute jobs. the glace registry, along with its metadata, stores the image information. the image stores predefined images for the user or admin. the nova-network assures connectivity and routing of the network. neuron (networking) this component is used for networking in openstack. neutron manages all the network-related queries, such as ip address management, routers, subnets, firewalls, vpns, etc. it confirms that all the other components are well connected with the openstack. glance (image) this component offers image services to openstack. here, image service means the images or virtual copies of hard disks. when we plan to deploy a new virtual machine instance, glance allows us to use these images as templates. swift (object storage) to store and retrieve arbitrary data in the cloud, object storage is used. in swift, it is possible to store the files, objects, backups, images, videos, virtual machines, and other unstructured data. cinder (block storage) this works in the traditional way of attaching and detaching an external hard drive to the os for its local use. cinder manages to add, remove, create new disk space in the server. this component provides the virtual storage for the vms in the system. horizon (dashboard) this is the first component that the user sees in the openstack. horizon is the web ui (user interface) component used to access the other back-end services. keystone (identity) it is the central repository of all the users and their permissions for the openstack services they use. this component is used to manage identity services like authorization, authentication, aws styles (amazon web services) logins, token-based systems, and checking the other credentials (username & password). how does openstack work? basically, openstack is a series of commands which is called scripts. and these scripts are packed into packages, which are called projects that rely on tasks that create cloud environments. openstack relies on two other forms of software in order to construct certain environments: virtualization means a layer of virtual resources basically abstracted from the hardware. a base os that executes commands basically provided by openstack scripts. so, we can say all three technologies, i.e., virtualization, base operating system, and openstack must work together. let's discuss how openstack works! as we know, the horizon is an interface for the appliance environment. anything that the user wants to do should use the horizon (dashboard). the dashboard is a simple graphical user interface with multiple modules, where each module performs specific tasks. all the actions in openstack work by the service api call. so, if you are performing any task, it means you are calling a service api. each api call is first validated by keystone. so, you will have to login yourself as a registered user with your login username and password before you enter the openstack dashboard. once you successfully log in to the openstack dashboard, you will get many options to create new instances, volumes, cinder, and configure the network. instances are nothing but a virtual machine or environment. to generate a new vm, use the 'instances' option from the openstack dashboard. in these instances, you can configure your cloud. instances can be redhat, opensuse, ubuntu, etc. the formation of an instance is also an api call. you can configure network information in the instances. you can connect these instances to the cinder instance or volume to add more services. after the successful creation of an instance, you can configure it, you can access it through cli, and whatever data you want to add, you can do it. even you can set up an instance to manage and store the snapshots for future reference or backup purposes. openstack vs. aws openstack and aws are both cloud computing platforms. both serve different purposes. the aws got introduced in 2006. and since 2006, the success of aws api has been rising rapidly. similarly, openstack had also grown since its beginning in 2010. aws aws (amazon web services) is an on-demand cloud computing platform that can perform almost any kind of process. aws offers a processing unit, storage, big data platform, ml platform, etc. since aws is an on-demand platform and charges very little, anyone can afford it according to their needs. it follows the concept of pay-as-you-go, but you just pay for the things you are using. unlike openstack, aws is not an open-source platform. only as a user we can use it. aws is a public cloud and is mostly used by a small or medium level of companies who do cannot afford and don't want to spend on server infrastructure. highlights of aws services let's see some services of aws: iam (identify access management) to authenticate several services. for quick deployment and cloud app management, amazon provides elastic beanstalk. amazon director services set up a separate, stand-alone directory of aws. amazon cloud watch for tracking services or programs. aws key management services (kms) for the development or management of encryption keys. amazon beta for handling billing or payroll. to send transactional emails, amazon provides ses (simple email service). amazon provides cognito for user data processing and synchronization. amazon offers ml (machine learning) services for building regression models from publicly available datasets. openstack like aws, openstack provides a cloud computing platform. using openstack, we can perform all types of services. but openstack is an open-source platform. using openstack, we can create our own cloud and configure the things as per our needs. we can deploy openstack in both private and public networks. users can access the openstack via a web-based dashboard component or apis. highlights of openstack openstack has made it possible for companies such as bloomberg and disney to handle their private clouds at very manageable prices. openstack offers mixed hypervisor environments and bare metal server environments. redhat, suse linux, and debian have all been active contributors and have been supporting openstack since its inception. openstack is used by walmart to organize more than one lac cores, which offers 100 % uptime during last year's black friday. difference between aws and openstack the difference between aws and openstack usually depends on your company's specific requirements. let's see the difference between openstack and aws: s.no. openstack aws 1. openstack is categorized as cloud management platforms and infrastructure as a service (iaas). aws lambda is categorized as a cloud platform as a service (paas). 2. glance handles the images. ami (amazon machine image) handles the images. 3. lbaas of openstack handles the load balance traffic. the elb (elastic load balancer) automatically distributes the incoming traffic from the services to the ec2 instances. 4. each virtual instance will automatically be allocated an ip address. it is handled by dhcp. aws allocates a private ip address to every new instance using dhcp. 5. identity authentication services are handled by keystone. identity authentication services are handled by iam identity and access management. 6. swift handles object storage. object storage is managed by s3 (simple storage service) bucket 7. a cinder component manages block storage. block storage is managed by ebs (elastic block storage) 8. openstack provides mysql and postgresql for the relational databases. users of aws use an instance of mysql or oracle 11g. 9. openstack uses mongodb, cassandra, or couchbase for a non-relational database. for a non-relational database, aws uses emr (elastic map reduce). 10. for networking, openstack uses neutron. for networking, aws uses vpc (virtual private cloud). 11. machine learning (ml) and nlp (natural language processing) are not readily available. machine learning (ml) and nlp (natural language processing) are possible in aws. 12. openstack has no speech or voice recognition solution. lex is used for speech or voice recognition solutions. 13. it has the mistral - workflow service. it follows the simple workflow service (swf). 14. ceilometer - the telemetry based billing, resource tracking etc. aws usage and the billing report. 15. no serverless framework. lambda is a serverless framework. benefits of openstack there are a lot of benefits of openstack in the cloud computing platform. let's see one by one : 1. open source as we know, using the open-source environment, we can create a truly defined data center. openstack is the largest open-source platform. it offers the networking, computing, and storage subsystems in a single platform. some vendors (such as redhat) have developed and continue to support their own openstack distributions. openstack source code is available at github. the two main advantages of the open-source openstack project is : openstack can be modified according to your rising demand - as per your requirement, you can add the extra features in openstack. it can be used without any limitations - since openstack is a freely available project, so there are no limitations or restrictions to use it. you can use it as per your requirement. there are no limits for what purpose you use it, where you use it, or how long you use it. 2. scalability scalability is the major key component of cloud computing. openstack offers better scalability for businesses. through this feature, it allows enterprises to spin up and spin down servers on-demand. 3. security one of the significant features of openstack is security, and this is the key reason why openstack is so popular in the cloud computing world. with openstack, your data is always secure - when company owners want to move their it infrastructure to the cloud, they always fear data loss. but there is no need to think about data loss with openstack. it offers the best security feature. openstack provides security professionals who are responsive to openstack's strong security. 4. automation automation is one of the main keys selling points of openstack when compared to another option. the ease with which you can automate tasks makes openstack efficient. openstack comes with a lot of inbuilt tools that make cloud management much faster and easier. openstack provides its own api or application program interface that helps other applications to have full control over the cloud. this function makes it easier to build your own apps that can communicate with openstack to perform tasks such as firing up vms. development support since openstack's source code is freely accessible, experts from all over the world can improve the platform. if a new feature is being designed, it can be built easily and professionally by a development team. openstack is like linux in that have many distributions with different features but share the same component. support from companies - for development, openstack gets support from it founders, including intel, ibm, at&t, cisco, red hat, dell, ubuntu, and so on. so, by leaps and bounds, it's changing, which is a massive benefit for you. support from the developers' community - many developers are working on the enhancement of openstack. they are continuously working hard to make the openstack better. 5. easy to access and manage we can easily access and manage openstack, which is the biggest benefit for you. openstack is easy to access and manage because of the following features : command line tools - we can access the openstack using command-line tools. dashboard - openstack offers users and administrators to access and manage various aspects of openstack using gui (graphical user interface) based dashboard component. it is available as a web ui. apis - there are a lot of apis (application program interface), which is used to manage openstack. 6. services openstack provides many services required for several different tasks for your public, private, and hybrid cloud. list of services - openstack offers a list of services or components such as the nova, cinder, glance, keystone, neutron, ceilometer, sahara, manila, searchlight, heat, ironic, swift, trove, horizon, etc. each component is used for different tasks. such as nova provides computing services, neutron provides networking services, horizon provides a dashboard interface, etc. 7. strong community openstack has many experts, developers, and users who love to come together to work on the product of openstack and enhance the feature of openstack. 8. compatibility public cloud systems like aws (amazon web services) are compatible with openstack. compute (nova) nova is one of the most common and important components of openstack. compute is a controller that is used to handle virtualized environments' resources. it handles several virtual machines and other instances that perform computing tasks. nova is written in python language. vmware, xen, and kvm are the hypervisor technologies used, and this choice is contingent on openstack's version. openstack services which communicate with nova to ensure that nova operates at its most basic level, certain openstack services are required. these services are: keystone: firstly, keystone authenticates and offers an identity for all openstack services. the first feature built on openstack is keystone, and all projects, like nova, are responsible for it. glance: it works to handle server images for your cloud. therefore, it has the ability to upload compatible images of openstack via the repository of compute images. neutron: the physical or virtual networks that compute instances within your openstack cloud are given by neutron. placement: finally, nova needs placement to track the inventory of resources to assist in selecting which resource provider would be the right option when building a virtual machine inside your openstack cloud. to ensure optimum accessibility and performance, these additional openstack services closely interact with nova. nova architecture the above diagram can be summed up in these functionalities : the nova-api processes the requests and responses to and from the end-user. when a request is submitted, the nova generates and removes the instances. the nova-scheduler schedules nova-compute jobs. the glace registry, along with its metadata, stores the image information. the image stores predefined images for the user or admin. the nova-network assures connectivity and routing of the network. block storage (cinder) this works in the traditional way of attaching and detaching an external hard drive to the os for its local use. cinder manages to add, remove, create new disk space in the server. this component provides the virtual storage for the vms in the system. conceptually, cinder is similar in function to the ebs (elastic block storage). it is usually implemented in combination with other openstack services (e.g., compute, object storage, image, etc.). cinder and nova logical architecture are: without needing to think about costly physical storage systems or servers, cinder users are able to reduce and expand their storage space significantly. in addition, by allowing users to use one code for each operation, cinder simplifies code management. with reliability and ease of usage, cinder can handle all the provisioning and eliminate consumers' needs. some of the goals of cinder are : highly available recoverable fault-tolerant component-based architecture open standards cinder components object storage (swift) object storage is used in order to store and recover arbitrary data in the cloud. in swift, it is possible to store the files, objects, backups, images, videos, virtual machines, and other unstructured data. developers may use a special identifier for referring the file and objects in place of the path, which directly points to a file and allows the openstack to manage where to store the files to the api. for longevity, availability, and competitiveness, it is scalable and optimized. for storing unconstrained, redundant data, swift is ideal. since this is an object storage service, swift enables an api-accessible storage option that can be used around the cluster for backups, data retention, or archives that are redundant. object storage components are divided into the following key groups : proxy services auth services storage services account service container service objective service let's see an example diagram for the openstack object storage : some characteristics of openstack object storage are : there's a url for all objects contained in object storage. all objects have their own metadata. it is possible to locate object data anywhere in the cluster. via a restful http api, developers communicate with the swift. without downtime, new nodes can be connected to the cluster. it runs on industry-standard h/w, like hp, dell, & supermicro. data should not be transferred to an entirely new storage system. for objects stored in the cluster, 'storage policies' can describe various durability levels. shared file systems (manila) it offers file-based storage to a vm. this component gives an infrastructure for managing and provisioning file shares. manila uses a sql based central database shared by all manila services in the system. the manila service can operate in the configuration of a single node or multiple nodes. usually, manila is deployed with other openstack resources, such as compute, image or object storage. following are the goals of shared file system service : highly available recoverable open-standards fault-tolerant component-based architecture manila offers the following set of services : manila-api: it is an application for the web server gateway interface (wsgi), which verifies and guides requests via the shared file system service and also offers support to the openstack api. manila-data: this service receives the requests, processes the data operations with long running times such as backup, copying, or share migration. manila-scheduler: this service schedules and routes the requests to the shared file system services. to route requests, the scheduler follows configurable filters and weighers. the filter scheduler is the default and allows filters on items such as availability zones, capacity, capabilities, and share types. manila-scheduler also allows custom filters. manila-share: this service manages back-end systems in which have a shared file system. a manila-share service is capable of running in 1 of 2 modes, with or without the managing of shared servers. the shared file system (manila) contains the following set of components : back-end storage devices users and tenants basic resources shares snapshots share networks networking (neutron) this component is used for networking in openstack. neutron manages all the network-related queries, such as ip address management, routers, subnets, firewalls, vpns, etc. it confirms that all the other components are connected properly with the openstack. neutron delivers naas (networking-as-a-service) in a virtual computing environment. it has replaced the original api (application program interface), called quantum, in openstack. neutron is managed by other openstack components such as nova. networking has a service on the controller node, called the neutron server, including a lot of agents and plugins that use a messaging queue to communicate with each other. you can select the various agents you want to use, dependent on the type of operation. some features of neutron: sets up the virtual network infrastructure. switching and routing. specialized virtual network functions like vpnaas, fwaas, lbaas. flexibility through agents, plugins, and drivers. neutron integrates with various openstack services, i.e., keystone, nova, glance, and horizon. there are the following neutron plugins : vmware nsx cisco switches (nx-os) ryu network os nec openflow open vswitch plumgrid director plugin linux bridging opendaylight plugin juniper opencontrail midokura midonet plugin neutron architecture the neutron architecture is very simple. it is fully based on agents and plugins. dashboard (horizon) this is the first component that the user sees in the openstack. horizon is the web ui (user interface) component used to access the other back-end services. through individual api (application programming interface), developers can access the openstack's components, but through the dashboard, system administrators can look at what is going on in the cloud and manage it as per their need. at the core of its architecture and design, the dashboard has many key values : core support: out-of-the-box provision for all core openstack projects. extensible: as a "first-class citizen", anyone can add a new component. manageable: the core codebase has to be easy to direct and should be simple. consistent: throughout, visual and interaction paradigms are maintained. stable: a reliable application program interface (api) with an emphasis on backward compatibility. usable: providing an amazing interface that individuals want to use. horizon is based on the django web framework for both users and administrators of an openstack cloud. it interacts with instances, images, volumes, and networks within an openstack cloud. through horizon, we can manage nova, glance, neutron, and cinder services within the openstack cloud. the image below shows how the dashboard is connected to all the openstack components. notice that openstack with all seven core components is shown in this image : let's see the first screen. once you open the dashboard in your browser with the url, you will get the following screen : identity service (keystone) it is the central repository of all users and their privileges for the services they are using for openstack. this component is used to manage identity services like authorization, authentication, aws styles (amazon web services) logins, token-based systems, and checking the other credentials (username & password). there are the following functions which usually perform by keystone: monitoring users and their permissions providing a list of available resources with their api endpoints. there are the following set of services or components that are provided by identity service : server: it is a central system that offers authentication and authorization services using a rest interface. drivers: these are integrated with the centralized server. drivers access the identity data in external repositories to openstack and may already exist in the infrastructure where openstack is deployed (such as ldap or sql database servers). modules: in the location of the openstack service, which uses the identity service, middleware modules run. these modules retrieve the requests for the service, extract user credentials and send them for authorization to the server. for integration between middleware modules and openstack services or components, the python web server gateway interface is used. image service (glance) the glance component is used to provide the image services to openstack. here, image service means the images or virtual copies of hard disks. when we plan to deploy a new virtual machine instance, then glance allows us to use these images as templates. glance allows virtual box (vdi), vmware (vmdk, ovf), raw, hyper-v (vhd) and kvm (qcow2) virtual images. glance contains a rest api from which you can query the metadata of a vm image and retrieve an actual image. it is central to iaas (infrastructure as a service). the openstack glance service contains the following components : glance-api: for image detection, retrieval, and storage, glance-api accepts image api calls. glance-registry: it stores, processes, and retrieves image metadata. where items like size and type are included in the metadata. database: it is used to store image metadata, and according to your choice, you can select your database. mysql or sqlite are used for most deployments. storage repository for image files: standard file systems (or any file system installed on the glance-api controller node), http, object storage, rados block devices, and vmware datastore multiple repository forms are supported. metadata definition service: it is a normal api to meaningfully define your own custom metadata for suppliers, administrators, services, and users. such metadata may be used for various resource types, such as images, artifacts, volumes, flavors, and aggregates. glance architecture it follows a client-server architecture. it provides the rest api from which server request is made. client requests are accepted via the rest api and wait for authentication from keystone. the glance domain controller controls all internal processes, which are split into layers, and each layer performs its own tasks. image service architecture contains the following components : client rest api dal (database abstraction layer) registry layer glance store glance domain controller data processing service (sahara) the sahara component offers a simple method to the users to preplanned hadoop clusters by referring to the multiple options such as the hadoop version, cluster topology and hardware details of nodes and some more. sahara is a data processing service, also called elastic map-reduce, which offers a platform for the provisioning and management of instance clusters using processing frameworks like spark and hadoop. following are the main features of sahara : fast and flexible deployment of hadoop clusters. they were designed as an openstack service or component. predefined hadoop templates user-friendly ui for ad-hoc analytics queries based on pig or hive. supports multiple hadoop distributions. managed hadoop workloads in a few clicks. no need to be an expert in hadoop. it supports different kinds of jobs, such as pig, hive, and oozie workflows. the data could be taken from several sources like sql databases, swift, hdfs, and nosql. other features like unlimited scalability, elasticity, and data availability. architecture of sahara cluster configuration manager auth component data access layer (dal) provisioning of virtual machines installation rest api python sahara client sahara pages future scope as we know, cloud computing is getting wide in the last decade. most of the biggest giants investing heavily to leverage the growing trend, such as google, aws, microsoft, or rackspace. openstack is open source freely available with apache 2.0 license and is backed by thousands of big technology companies. over the years, it is kept on improving its popularity. hundreds of enterprises are using it to build their own private cloud, and some are delivering support services. so, career-wise, in current business situations, i would suggest it is one of the best innovations to look for. the future calls for such a stable environment, and as a free architecture with some excellent long-term features, openstack will continue its legacy. if you're looking for something that allows you to make better use of your current hardware, doesn't lock you into costly support contracts and has a wide global engineering community (over 100,000 members across 187 countries and increasing year on year by around 33 percent), then openstack could be the solution for you. one thing is to remain there for secure cloud computing, with openstack getting a promising future for sure in at least the next ten years. openstack is a bundle of numerous cutting edge items that offer the best experience for cloud computing. so learning it and gaining experience in a few projects would not only make you a seasoned professional in the cloud but also help you develop skills in problem-solving. conclusion openstack is one of the best environments in organizations for cloud computing. openstack's ease of linear scalability and open-source architecture have attracted many clients and enthusiasts of technology to come forward and contribute to development. this has only made openstack stronger over the years. openstack can be called for cloud computing, with all the benefits and endless modular functionality, as it proves to be an affordable option for the longer term. prerequisite before proceeding with this tutorial, you must have a basic knowledge of cloud computing and the storage domain. audience this tutorial is created for it managers and system administrators who would like to learn the basics of openstack. problem we assure you that you will not find any difficulty while learning our openstack tutorial. but if there is any mistake in this tutorial, kindly post the problem or error in the contact form so that we can improve it. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me Â© copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
