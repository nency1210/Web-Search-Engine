https://www.javatpoint.com/kubernetes::kubernetes tutorial - javatpoint â‡§ scroll to top home java kubernetes linux jquery compiler coa html css selenium servlet jsp quiz projects interview q comment forum training kubernetes tutorial kubernetes tutorial kubernetes tutorial what is kubernetes? kubernetes is also known as 'k8s'. this word comes from the greek language, which means a pilot or helmsman. kubernetes is an extensible, portable, and open-source platform designed by google in 2014. it is mainly used to automate the deployment, scaling, and operations of the container-based applications across the cluster of nodes. it is also designed for managing the services of containerized apps using different methods which provide the scalability, predictability, and high availability. it is actually an enhanced version of 'borg' for managing the long-running processes and batch jobs. nowadays, many cloud services offer a kubernetes-based infrastructure on which it can be deployed as the platform-providing service. this technique or concept works with many container tools, like docker, and follows the client-server architecture. key objects of kubernetes following are the key objects which exist in the kubernetes: pod it is the smallest and simplest basic unit of the kubernetes application. this object indicates the processes which are running in the cluster. node a node is nothing but a single host, which is used to run the virtual or physical machines. a node in the kubernetes cluster is also known as a minion. service a service in a kubernetes is a logical set of pods, which works together. with the help of services, users can easily manage load balancing configurations. replicaset a replicaset in the kubernetes is used to identify the particular number of pod replicas are running at a given time. it replaces the replication controller because it is more powerful and allows a user to use the "set-based" label selector. namespace kubernetes supports various virtual clusters, which are known as namespaces. it is a way of dividing the cluster resources between two or more users. features of kubernetes following are the essential features of kubernetes: pod: it is a deployment unit in kubernetes with a single internet protocol address. horizontal scaling: it is an important feature in the kubernetes. this feature uses a horizontalpodautoscalar to automatically increase or decrease the number of pods in a deployment, replication controller, replica set, or stateful set on the basis of observed cpu utilization. automatic bin packing: kubernetes helps the user to declare the maximum and minimum resources of computers for their containers. service discovery and load balancing: kubernetes assigns the ip addresses and a name of dns for a set of containers, and also balances the load across them. automated rollouts and rollbacks: using the rollouts, kubernetes distributes the changes and updates to an application or its configuration. if any problem occurs in the system, then this technique rollbacks those changes for you immediately. persistent storage: kubernetes provides an essential feature called 'persistent storage' for storing the data, which cannot be lost after the pod is killed or rescheduled. kubernetes supports various storage systems for storing the data, such as google compute engine's persistent disks (gce pd) or amazon elastic block storage (ebs). it also provides the distributed file systems: nfs or gfs. self-healing: this feature plays an important role in the concept of kubernetes. those containers which are failed during the execution process, kubernetes restarts them automatically. and, those containers which do not reply to the user-defined health check, it stops them from working automatically. kubernetes architecture the architecture of kubernetes actually follows the client-server architecture. it consists of the following two main components: master node (control plane) slave/worker node master node or kubernetes control plane the master node in a kubernetes architecture is used to manage the states of a cluster. it is actually an entry point for all types of administrative tasks. in the kubernetes cluster, more than one master node is present for checking the fault tolerance. following are the four different components which exist in the master node or kubernetes control plane: api server scheduler controller manager etcd api server the kubernetes api server receives the rest commands which are sent by the user. after receiving, it validates the rest requests, process, and then executes them. after the execution of rest commands, the resulting state of a cluster is saved in 'etcd' as a distributed key-value store. scheduler the scheduler in a master node schedules the tasks to the worker nodes. and, for every worker node, it is used to store the resource usage information. in other words, it is a process that is responsible for assigning pods to the available worker nodes. controller manager the controller manager is also known as a controller. it is a daemon that executes in the non-terminating control loops. the controllers in a master node perform a task and manage the state of the cluster. in the kubernetes, the controller manager executes the various types of controllers for handling the nodes, endpoints, etc. etcd it is an open-source, simple, distributed key-value storage which is used to store the cluster data. it is a part of a master node which is written in a go programming language. now, we have learned about the functioning and components of a master node; let's see what is the function of a slave/worker node and what are its components. worker/slave node the worker node in a kubernetes is also known as minions. a worker node is a physical machine that executes the applications using pods. it contains all the essential services which allow a user to assign the resources to the scheduled containers. following are the different components which are presents in the worker or slave node: kubelet this component is an agent service that executes on each worker node in a cluster. it ensures that the pods and their containers are running smoothly. every kubelet in each worker node communicates with the master node. it also starts, stops, and maintains the containers which are organized into pods directly by the master node. kube-proxy it is a proxy service of kubernetes, which is executed simply on each worker node in the cluster. the main aim of this component is request forwarding. each node interacts with the kubernetes services through kube-proxy. pods a pod is a combination of one or more containers which logically execute together on nodes. one worker node can easily execute multiple pods. installation of kubernetes on linux the installation of kubernetes on linux is a straight forward process. follow the below steps to install the kubernetes. in the installation of kubernetes, each step is mandatory. step 1: in this step, we have to update the necessary dependencies of a system using two commands. the first command is used to get all the updates. execute the following command in the terminal; it will ask to enter the system's password. 
sudo apt-get update
 output: when the first command is successfully executed, type the following second command, which is used to make the repositories. 
sudo apt-get install -y apt-transport-https
 output: step 2: after the above steps are successfully executed, we have to install the dependencies of docker in this step. type the following command to install the docker. in the installation process, we have to choose y for confirmation of the installation. 
sudo apt install docker.io 
 output: after installing the docker, we have to type the different two commands for starting and enabling the docker. type the following first command, which starts the docker: 
sudo systemctl start docker
 now, type the following second command, which enables the docker: 
sudo systemctl enable docker
 output: now, we can check the version of docker by typing the following command: 
docker -version
 output: step 3: after the successful execution of all the commands of the second step, we have to install the curl command. the curl is used to send the data using url syntax. now, install the curl by using the following command. in the installation, we have to type y. 
sudo apt-get install curl
 output: now, we have to download the add package key for kubernetes by the following command: 
sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
 output: if you get an error from the above command, then it means your curl command is not successfully installed, so first install the curl command, and again run the above command. now, we have to add the kubernetes repositories by the following command: 
sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
 output: after the successful execution of the above command, we have to check any updates by executing the following command: 
sudo apt-get update
 output: step 4: after the execution of the above commands in the above steps, we have to install the components of kubernetes by executing the following command: 
sudo apt-get install -y kubelet kubeadm kubectl kubernetes-cni
 output: step 5: after the above installation is done, we have to initialize the kubeadm by executing the following command. the following command disables the swapping on other devices: 
sudo swapoff -a
 output: now, we have to initialize the kubeadm by executing the following command: 
sudo kubeadm init
 output: step 6: after the above command is successfully executed, we have to run the following commands, which are given in the initialization of kubeadm. these commands are shown in the above screenshot. the following commands are used to start a cluster: 
mkdir -p $home/.kube
sudo cp -i /etc/kubernetes/admin.conf $home/.kube/config
sudo chown $(id -u):$(id -g) $home/.kube/config
 output: step 7: in this step, we have to deploy the paths using the following command: 
sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/documentation/kube-flannel.yml
 output: step 8: after the execution of the above command, we have to run the following command to verify the installation: 
sudo kubectl get pods --all-namespaces 
 output: if the output is displayed as shown in the above screenshot. it means that the kubernetes is successfully installed on our system. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me Â© copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
