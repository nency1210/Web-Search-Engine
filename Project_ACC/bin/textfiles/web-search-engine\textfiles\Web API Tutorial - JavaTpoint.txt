https://www.javatpoint.com/web-api::web api tutorial - javatpoint â‡§ scroll to top home web api .net data science java python jira testng selenium projects interview q comment forum training web api web api tutorial asp.net web api tutorial in this tutorial, we will discuss the following topics: what is web api? who uses api? asp.net web api asp.net web api features restful services principles of rest api methods of rest api implementing rest api simple application need for web api mvc vs. web api web api vs. wcf web api vs. web services web api security asp.net web api tutorial provides basic and advanced concepts of asp.net. our asp.net tutorial is designed for beginners and professionals both. what is web api? web api is the enhanced form of the web application to provide services on different devices like laptop, mobile, and others. today, all kind of businesses use the internet as a cost-effective way to expand their business in the international market. web application helps to exchange information on the internet and also helps to perform a secure transaction on web sites. web applications are popular as the web browser is available in default, we don't need any installation of software on computers with operating systems. for example, facebook (a social networking web application), flickr (a photo-sharing web application), and wikipedia are majorly used example of a web application. technically, a web application consists of two types of scripts: 1) client-side scripts: javascript, html, and other client-side scripting languages are used to design the web forms to present information to users. 2) server-side scripts: asp and other server-side scripting languages are used to perform business logic and database related operations like storing and retrieving information. a web application is human-system interaction. either it can be single page application just to provide information for some business, or it can be a collection of web pages that are used to take some information from the user and providing the services to the user. who uses api? these services can be accessed by different kind of users like: web browsers mobile applications desktop applications iots (internet of things) asp.net web api api stands for the application programming interface. "asp.net web api is an extensible framework for building http (hypertext transfer protocol) services that can be accessed from any client such as browsers and mobile devices." for example, we make a reservation from different web applications like makemytrip, ixigo or paytm and all other reservation web applications, but all applications make a reservation using credentials from irctc web site only, i.e., user performing reservation must have login credentials of irctc web site. these services can be accessed by different kind of users like: web browsers mobile applications desktop applications iots (internet of things) web api services are used when the application is to be used on a distributed system. web api takes requests from the different type of client devices like mobile, laptop, etc. and sends them to the web-server to process it and returns the desired data to the client. custom web application using a different kind of api's web api is system-system interaction, where information from one system is processed by another system, and resultant data is shown to the viewer. let's take another example from web api examples, we want mcdonald's burger. let us suppose mcdonald's only gives permission for takeaways to cooks only and not for others. here mcdonalds-takeaways (cook) is like an api, which allows other systems (cooks) to access the services and provide desired data. asp.net web api features 1) asp.net web api is much similar to asp.net mvc. 2) it contains similar features as asp.net mvc like: routing controllers action results filter model, etc. 3) there is a misconception that asp.net web api is a part of asp.net mvc framework, while it can be used with any other type of web application. 4) stand-alone services can be developed using the web api. 5) asp.net web api framework is widely used to develop restful services. restful services web api is the enhanced form of a web application. soap (simple object access protocol) was an xml based protocol for developing the connected web applications. problem with the soap was that with each request, metadata is attached with data to be transferred. this metadata converts small data to heavy data on the server. web api may or may not be restful services, but they are always http based services. rest stands for representational state transfer. in rest api, only the state of the object is sent to the server to find the desired result. rest is an architectural pattern for developing an api that uses http as its underlying communication method. when we are using http based service, for example, bookmyshow app, we need data in managed form like json format, xml format. client requests for the information by sending parameters using api methods. for example, if we want to book a show for which we want to know the details like city, movie name, place, timing. we will send the state of the object to the web-server, and api will check whether the data is available or not. if the data is available (the movie is available for that instance), then it will send back the response to the client with the object. values of an object are sent to the client, i.e., basically state of an object is sent to the client, so each time you don't have to create an object. "rest api is an architectural style as well as an approach for communications purpose that is often used in various web developments." it is a stateless, client-server model. principles of rest api the six principles of rest api are: stateless client-server uniform interface cacheable layered system code on demand 1) stateless: when the request from the client is sent to the server, it contains all the required information to make the server process it. a request may be part of querystring or url. for example, let's suppose the resource is requested from the url (uniform resource locator). 2) client-server: separating the functionality helps to increase user interface portability across multiple platforms as well as extended the scalability of the server components. 3) uniform interface: to obtain the uniformity throughout the application, rest has defined four interface constraints for which are: resource identification resource manipulation using representations self-descriptive massages and hypermedia as the engine of the web application 4) cacheable: in order to provide a better performance, applications are made cacheable. it is done by marking the response as cacheable or non-cacheable implicitly or explicitly. if the resource is defined cacheable, then the client cache can reuse response data for equivalence requests. 5) layered system: the layered system allows an application to be most stable by limiting component behavior. the layered architecture also helps to enhance security as the component at each layer cannot interact beyond each layer they are in. 6) code on demand: constraint that is used optionally and least. analyze and simplify the client by creating a smart application which doesn't lie on its own code structure. methods of rest api working on web technologies, we work on crud applications. in these applications, crud is to create, read, update, and delete a resource. here, a resource is defined as the desired result. for example: https://in.bookmyshow.com/noida/movies in the above example, the user is looking for movies in city noida on bookmyshow application, so the resource is the data, the client is looking for. to perform these actions like to create a resource, read a resource, update a resource, or delete a resource, we can use http methods also called as rest methods. now the basic crud operations are mapped to the http protocols in the following manner: crud methods rest api methods description create post method refers to the c(create) part of the crud. it is used to create a resource. read get method refers to the r(retrieve) part of the crud. it is used to read a resource. update put method refers to the u(update) part of the crud. it is used to update a resource. delete delete method refers to the d(delete) part of the crud. it is used to delete a resource. rest api is best used for distributed systems. a distributed database is used everywhere, database stores data, on which crud (create, retrieve, update, and delete) operations are performed. so let's have an example of getting some dishes from the resource: www.testwebsite.com/dishes now let's assume we want some specific dish from resource: www.testwebsite.com/dishes/2 implementing rest api simple application let's create a rest api service for students. firstly open visual studio (here we have visual studio 2019). now select create a new project: now select the template asp.net web application (.net framework) with c# and name the project as "webapistudentssample". in the asp.net project dialog, select the empty template and also check web api option. click ok. a default structure generated will be as follows: adding student.cs class to the models folder add a class with the name "student" to define properties and other business logic. we can also define other logics as validation, data access, etc. right-click on models, select add option, and then select class and give a name to the class as "student.cs" add the following code to define properties for student class: 
namespace webapistudentssample.models
{
    public class students
    {
        public int studentid
        {
            get;
            set;
        }
        public string studentname
        {
            get;
            set;
        }
        public string address
        {
            get;
            set;
        }
        public string course
        {
            get;
            set;
        }

    }
}
 adding studentcontrollers.cs class to controllers folder controller class handles http request from the client, which may be a desktop application, mobile device, and browser. right-click on controllers, select add option, and then select 'controller..'. add scaffold window will open then select web api2 controller ?empty template. after selecting scaffolding template, add controller window will open and give a name to the class as "studentcontroller". note: we can see that the controller class inherits the system.web.http.apicontroller class instead of the controller class. scaffolding creates a "studentcontroller.cs" class inside the controller folder. now implement methods to perform crud operations. let us assume we want all student details and also details for some specific student. now add following code: 
using system;
using system.collections.generic;
using system.linq;
using system.net;
using system.net.http;
using system.web.http;
using webapistudentssample.models;

namespace webapistudentssample.controllers
{
    public class studentcontroller : apicontroller
    {
        ilist<students> students = new list<students>()
        {
            new students()
                {
                    studentid = 1, studentname = "mukesh kumar", address = "new delhi", course = "it"
                },
                new students()
                {
                    studentid = 2, studentname = "banky chamber", address = "london", course = "hr"
                },
                new students()
                {
                    studentid = 3, studentname = "rahul rathor", address = "laxmi nagar", course = "it"
                },
                new students()
                {
                    studentid = 4, studentname = "yaduveer singh", address = "goa", course = "sales"
                },
                new students()
                {
                    studentid = 5, studentname = "manish sharma", address = "new delhi", course = "hr"
                },
        };
        public ilist<students> getallstudents()
        {
            //return list of all employees  
            return students;
        }
        public students getstudentdetails(int id)
        {
            //return a single employee detail  
            var student = students.firstordefault(e => e.studentid == id);
            if (student == null)
            {
                throw new httpresponseexception(request.createresponse(httpstatuscode.notfound));
            }
            return student;
        }
    }
}
 in the studentcontroller class controller, you can see that the method "getallstudents" return the list of all students and the method "getstudentdetails" returns the detail of single student. in the following table, you can understand how controller use route url to perform crud action. controller method route uri(uniform resource identifier) getallstudents /api/ student getstudentdetails /api/ student /id run the web api to run a web api, firstly press f5 or ctrl+f5 or click on iis express run icon then the browser will open with the url like https://localhost:44329/ now to find the list of all students edit the url as https://localhost:44329/api/student to fetch the details of a single student, edit the url as: https://localhost:44329/api/student/2 need for web api a web api helps to access service data from different internet devices like browsers, mobile apps, and other devices. helps to work on restful web services. helps to develop light weighted and maintainable web services. used to create both types of services restful and non-restful services. also supports json, xml, and other data formats. helps to develop services supporting all features of http services such as like caching, request/response headers, versioning, etc. mvc vs. web api differences between asp.net api and asp.net mvc are as follows: mvc web api helps to develop web applications that process the request and sends both views and data. helps to develop http services (restful and non-restful services) that process the request and returns data only, not a view. represents resultant data in json format using jsonresult. return data in particular format like json, xml or any other format a request is mapped to actions name. a request is mapped to http verbs in web api model binding, routing, and other features are defined in system.web.mvc. same features are available in web api, and these features are defined in system.web.http assembly. mvc usually interact with the views to provide final output supports feature of content-negotiation, i.e., deciding the best format for response data that is compatible with the client machine. web api vs. wcf differences between asp.net wcf and asp.net web api are as follows: feature web api wcf content format web api supports any media format like xml, json, etc. wcf supports soap-based services and xml format. hosting web api supports iis hosting, self-hosting wcf supports works activation services and also iis hosting, self-hosting. mvc features asp.net web api supports features like controllers, routing, action, etc. same as mvc. like mvc, wcf does not provide any features like controllers, routing, filter, auction results, etc. protocol web api supports http protocol. udp, http, and custom transport protocol are supported. use of model uses http verbs as methods called as crud operations servicecontract attribute defines a service contract that contains operations. operationcontract attribute defines the operations that will be used. datacontract attribute defines the properties or types that will be transferred between the parties. web api vs. web services differences between web api and web services are as follows: features web api web services hosting hosting is done within an application or iis. hosting is done on iis. open source web api is open-source, and it can be used by any client that supports json or xml. web service is not open-source but can be used by any client that supports xml. architecture web api is light-weighted architecture and good for devices which have limited bandwidth, like mobile devices. it requires a soap protocol to receive and send data over the network, so it is not light-weight architecture. protocol it supports the http protocol: url, request/response headers, versioning, caching, content formats. it supports the http protocol only. web api security asp.net web api authentication and authorization are important concepts for web api security. suppose a web api is created, and the access to the api is for some specific users, and also different operations are available for different users. authentication is to validate the credentials for the user and identify them. for example, a user login with his username and password and server authenticate the user by a password. authorization is to define the access level for each user to perform a different operation. for example, a person is allowed to create a resource but not to delete the record. if a request requires authentication in web api, but the client does not provide the credentials in the request header, then the server will return 401 (unauthorized). prerequisite before learning web api, the user must have basic knowledge of http methods, c# properties also knowledge of mvc will be plus point. audience this tutorial is for beginners and professionals to learn web api and restful services. problems this tutorial is available in a simple and easy language still, if there is any confusion, kindly post the doubt in the contact form. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me Â© copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
