https://www.javatpoint.com/data-structure-tutorial::data structures | ds tutorial - javatpoint ⇧ scroll to top home data structure c c++ c# java sql html css javascript ajax android cloud design pattern quiz projects interview q comment forum ds tutorial ds tutorial ds introduction ds algorithm asymptotic analysis ds pointer ds structure ds array ds array 2d array ds linked list linked list types of linked list singly linked list doubly linked list circular linked list circular doubly list skip list in ds ds stack ds stack array implementation linked list implementation ds queue ds queue types of queues array representation linked list representation circular queue deque priority queue ds tree ds tree binary tree binary search tree avl tree b tree b+ tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort differences linear vs non-linear array vs linked list stack vs queue linear vs circular queue linear search vs binary search singly linked list vs doubly linked list binary vs binary search tree tree vs graph binary search tree vs avl tree red black tree vs avl tree b tree vs b+ tree quick sort vs merge sort bfs vs dfs stack vs heap bubble sort vs. selection sort stack vs array full binary tree vs complete binary tree binary tree vs b tree primitive vs non-primitive data structure data types vs data structure misc trie data structure heap data structure splay tree fundamental of the ds hash table preorder traversal tree traversal implementation of queue using stacks implementation of stack using queue binomial heap postorder traversal sparse matrix detect loop in a linked list inorder traversal convert infix to postfix notation convert infix to prefix notation conversion of prefix to postfix expression conversion of postfix to prefix expression remove the loop in a linked list implement two stacks in an array reverse a stack using recursion detect cycle in a directed graph optimal binary search tree priority queue using linked list balanced binary search tree boundary traversal of binary tree diagonal traversal of binary tree vertical traversal of a binary tree graph algorithms time complexity of sorting algorithms applications of stack in data structure dictionary data structure structured data and unstructured data list data structure types of tree in data structure abstract data type in data structure disjoint set data structure dynamic data structure hash function in data structure complete binary tree threaded binary tree diameter of binary tree height of binary tree inorder tree traversal without stack enumeration of binary trees maximum width of a binary tree types of graph in data structure primitive data type semi-structured data advance data structures sort an array of 0's, 1's, and 2's stock span problem implementation of deque by circular array rotate operation in linked list subarray with given sum self-organizing list unrolled linked list types of sparse matrices application of linked list topological sorting ternary search tree stock span problem treap data structure quicksort on doubly linked list inversion count expression tree in ds garbage collection in ds merge sort on doubly linked list sort stack using recursion lifo approach in data structure big o notation in ds binary tree traversal in ds queue operations in ds what is a non-linear data structure fifo approach in data structure what are connected graphs in data structure which python data structure is immutable which data structure is used by map what is iteration in data structure what are linear search and binary search in data structure hash table vs stl map recaman's sequence ds mcq data structure mcq advanced ds mcq next → data structures tutorial data structures (ds) tutorial provides basic and advanced concepts of data structure. our data structure tutorial is designed for beginners and professionals. data structure is a way to store and organize data so that it can be used efficiently. our data structure tutorial includes all topics of data structure such as array, pointer, structure, linked list, stack, queue, graph, searching, sorting, programs, etc. what is data structure? the data structure name indicates itself that organizing the data in memory. there are many ways of organizing the data in the memory as we have already seen one of the data structures, i.e., array in c language. array is a collection of memory elements in which data is stored sequentially, i.e., one after another. in other words, we can say that array stores the elements in a continuous manner. this organization of data is done with the help of an array of data structures. there are also other ways to organize the data in memory. let's see the different types of data structures. the data structure is not any programming language like c, c++, java, etc. it is a set of algorithms that we can use in any programming language to structure the data in the memory. to structure the data in memory, 'n' number of algorithms were proposed, and all these algorithms are known as abstract data types. these abstract data types are the set of rules. types of data structures there are two types of data structures: primitive data structure non-primitive data structure primitive data structure the primitive data structures are primitive data types. the int, char, float, double, and pointer are the primitive data structures that can hold a single value. non-primitive data structure the non-primitive data structure is divided into two types: linear data structure non-linear data structure linear data structure the arrangement of data in a sequential manner is known as a linear data structure. the data structures used for this purpose are arrays, linked list, stacks, and queues. in these data structures, one element is connected to only one another element in a linear form. when one element is connected to the 'n' number of elements known as a non-linear data structure. the best example is trees and graphs. in this case, the elements are arranged in a random manner. we will discuss the above data structures in brief in the coming topics. now, we will see the common operations that we can perform on these data structures. data structures can also be classified as: static data structure: it is a type of data structure where the size is allocated at the compile time. therefore, the maximum size is fixed. dynamic data structure: it is a type of data structure where the size is allocated at the run time. therefore, the maximum size is flexible. major operations the major or the common operations that can be performed on the data structures are: searching: we can search for any element in a data structure. sorting: we can sort the elements of a data structure either in an ascending or descending order. insertion: we can also insert the new element in a data structure. updation: we can also update the element, i.e., we can replace the element with another element. deletion: we can also perform the delete operation to remove the element from the data structure. which data structure? a data structure is a way of organizing the data so that it can be used efficiently. here, we have used the word efficiently, which in terms of both the space and time. for example, a stack is an adt (abstract data type) which uses either arrays or linked list data structure for the implementation. therefore, we conclude that we require some data structure to implement a particular adt. an adt tells what is to be done and data structure tells how it is to be done. in other words, we can say that adt gives us the blueprint while data structure provides the implementation part. now the question arises: how can one get to know which data structure to be used for a particular adt?. as the different data structures can be implemented in a particular adt, but the different implementations are compared for time and space. for example, the stack adt can be implemented by both arrays and linked list. suppose the array is providing time efficiency while the linked list is providing space efficiency, so the one which is the best suited for the current user's requirements will be selected. advantages of data structures the following are the advantages of a data structure: efficiency: if the choice of a data structure for implementing a particular adt is proper, it makes the program very efficient in terms of time and space. reusability: the data structure provides reusability means that multiple client programs can use the data structure. abstraction: the data structure specified by an adt also provides the level of abstraction. the client cannot see the internal working of the data structure, so it does not have to worry about the implementation part. the client can only see the interface. data structures index ds basics ds tutorial ds introduction ds algorithm ds asymptotic analysis ds pointer ds structure ds array array 2d array ds linked list linked list insertion at beginning insertion at end insertion after specified node deletion at beginning deletion at end deletion after specified node traversing searching doubly linked list insertion at beginning insertion at end insertion after specified node deletion at beginning deletion at end deletion of node having given data traversing searching circular linked list insertion at beginning insertion at end deletion at beginning deletion at the end traversing searching circular doubly list insertion at beginning insertion at end deletion at beginning deletion at the end ds stack ds stack array implementation linked list implementation ds queue ds queue array implementation linked list implementation circular queue ds tree tree binary tree pre-order traversal in-order traversal post-order traversal binary search tree searching in bst insertion in bst deletion in bst avl tree insertion in avl tree ll rotation lr rotation rl rotation rr rotation deletion in avl tree b tree b+ tree red black tree ds graph ds graph graph implementation bfs algorithm dfs algorithm spanning tree prim's algorithm kruskal's algorithm ds searching linear search binary search ds sorting bubble sort bucket sort comb sort counting sort heap sort insertion sort merge sort quick sort radix sort selection sort shell sort bitonic sort cocktail sort cycle sort tim sort interview questions ds interview questions singly linked list programs program to create and display a singly linked list program to create a singly linked list of n nodes and count the number of nodes program to create a singly linked list of n nodes and display it in reverse order program to delete a new node from the beginning of the singly linked list program to delete a new node from the middle of the singly linked list program to delete a node from the end of the singly linked list program to determine whether a singly linked list is the palindrome program to find the maximum and minimum value node from a singly linked list program to insert a new node at the middle of the singly linked list program to insert a new node at the beginning of the singly linked list program to insert a new node at the end of the singly linked list program to remove duplicate elements from a singly linked list program to search an element in a singly linked list program to sort the elements of the singly linked list program to swap nodes in a singly linked list without swapping data program to swap the last element of the singly linked list from the first one doubly linked list programs program to convert a given binary tree to doubly linked list program to create a doubly linked list from a ternary tree program to create a doubly linked list of n nodes and count the number of nodes program to create a doubly linked list of n nodes and display it in reverse order program to create and display a doubly linked list program to delete a new node from the beginning of the doubly linked list program to delete a new node from the end of the doubly linked list program to delete a new node from the middle of the doubly linked list program to find the maximum and minimum value node from a doubly linked list program to insert a new node at the beginning of the doubly linked list program to insert a new node at the end of doubly linked list program to insert a new node at the middle of doubly linked list program to remove duplicate elements from a doubly linked list program to rotate doubly linked list by n nodes program to search an element in a doubly linked list program to sort the elements of the doubly linked list circular linked list programs program to create a circular linked list of n nodes and count the number of nodes program to create a circular linked list of n nodes and display it in reverse order program to create and display a circular linked list program to delete a new node from the beginning of the circular linked list program to delete a new node from the end of the circular linked list program to delete a new node from the middle of the circular linked list program to find the maximum and minimum value node from a circular linked list program to insert a new node at the beginning of the circular linked list program to insert a new node at the end of the circular linked list program to insert a new node at the middle of the circular linked list program to remove duplicate elements from a circular linked list program to search an element in a circular linked list program to sort the elements of the circular linked list tree programs program to calculate the difference between the sum of the odd level and even level nodes of a binary tree program to construct a binary search tree and perform deletion and inorder traversal program to convert binary tree to binary search tree program to determine whether all leaves are at same level program to determine whether two trees are identical program to find maximum width of a binary tree program to find the largest element in a binary tree program to find the maximum depth or height of a tree program to find the nodes which are at the maximum distance in a binary tree program to find the smallest element in a binary tree program to find the sum of all the nodes of a binary tree program to find the total number of possible binary search trees with n keys program to implement binary tree using the linked list program to search a node in a binary tree prerequisite before learning data structure, you must have the basic knowledge of c. audience our data structure tutorial is designed to help beginners and professionals. problem we assure that you will not find any problem in this data structure tutorial. but if there is any mistake, please post it in the contact form. next topicdata structure introduction next → for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me © copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
