https://www.javatpoint.com/vhdl::vhdl tutorial - javatpoint â‡§ scroll to top home java vhdl c c++ c# servlet jsp ejb struts2 mail hibernate spring android design p projects interview q comment forum training vhdl tutorial vhdl tutorial vhdl tutorial vhdl tutorial provides basic and advanced concepts of vhdl. our vhdl tutorial is designed for beginners and professionals. what is hdl? what is vhdl? what is verilog difference between vhdl and verilog history of vhdl why vhdl? advantages of vhdl disadvantages of vhdl basic elements of vhdl types of modeling styles in vhdl vhdl objects data types in vhdl vhdl operators install the xilinx ide tool creating a project in vhdl using the xilinx ide tool vhdl vs. c language what is hdl? hdl stands for hardware description language. it is a programming language that is used to describe, simulate, and create hardware like digital circuits (ics). hdl is mainly used to discover the faults in the design before implementing it in the hardware. the main advantage of hdls is that it provides flexible modeling capabilities and can express the large complex designs (>107 gates). today, there are many hdls available in the market, but vhdl and verilog are the most popular hdls. what is vhdl? vhdl stands for very high-speed integration circuit hdl (hardware description language). it is an ieee (institute of electrical and electronics engineers) standard hardware description language that is used to describe and simulate the behavior of complex digital circuits. the most popular examples of vhdl are odd parity generator, pulse generator, priority encoder, behavioral model for 16 words, 8bit ram, etc. vhdl supports the following features: design methodologies and their features. sequential and concurrent activities. design exchange standardization documentation readability large-scale design a wide range of descriptive capability what is verilog? verilog is also a hdl (hardware description languages) for describing electronic circuits and systems. it is used in both hardware simulation and synthesis. the most popular examples of verilog are network switch, a microprocessor, a memory, a simple flip-flop, etc. difference between vhdl and verilog vhdl verilog it allows the user to define data types. it does not allow the user to define data types. it supports the multi-dimensional array. it does not support the multi-dimensional array. it allows concurrent procedure calls. it does not allow concurrent calls. a mod operator is present. a mod operator is not present. unary reduction operator is not present. unary reduction operator is present. it is more difficult to learn. it is easy to learn. history of vhdl vhdl was developed by the department of defence (dod) in 1980. 1980: the department of defence wanted to make circuit design self-documenting. 1983: the development of vhdl began with a joint effort by ibm, inter-metrics, and texas instruments. 1985 (vhdl version 7.2): the final version of the language under the government contract was released. 1987: dod permitted for commercial purpose, and vhdl became ieee standard 1076-1987. 1993: vhdl was re-standardized to enhance the language 1996: a vhdl package used with synthesis tools and became a part of the ieee 1076 standard. 1999: analog mixed signal extension (vhdl-ams) 2008: ieee standard 1076-2008 (new features) was released. why vhdl? vhdl is used for the following purposes: for describing hardware as a modeling language for a simulation of hardware for early performance estimation of system architecture for the synthesis of hardware advantages of vhdl a list of advantages of vhdl is given below: it supports various design methodologies like top-down approach and bottom-up approach. it provides a flexible design language. it allows better design management. it allows detailed implementations. it supports a multi-level abstraction. it provides tight coupling to lower levels of design. it supports all cad tools. it strongly supports code reusability and code sharing. disadvantages of vhdl a list of disadvantages of vhdl is given below: it requires specific knowledge of the structure and syntax of the language. it is more difficult to visualize and troubleshoot a design. some vhdl programs cannot be synthesized. vhdl is more difficult to learn. basic elements of vhdl there are the following three basic elements of vhdl: 1. entity the entity is used to specify the input and output ports of the circuit. an entity usually has one or more ports that can be inputs (in), outputs (out), input-outputs (inout), or buffer. an entity may also include a set of generic values that are used to declare properties of the circuit. entity declaration you can declare an entity using the following syntax: simplified syntax 
      entity entity_name is
port (
 port_1_name : mode data_type;
port_2_name : mode data_type;
                  .......
                  port_n_name : mode data_type
                  );
     end entity_name;
 example: 
entiy orgate is
   port (
                a : in   std_logic;
                b : in   std_logic;
                c : out  std_logic
             );
end orgate; 
 using generic if an entity is generic, then it must be declared before the ports. generic does not have a mode, so it can only pass information into the entity. syntax: 
entity entity_name is
    generic (
                  generic_1_name : data_type;
                  generic_2_name : data_type;
                   ........
                  generic_n_name : data_type
                   );
 port (
             port_1_name : mode data_type;
              port_2_name : mode data_type;
              ........
              port_n_name : mode data_type
               );
     end entity_name;
 example: 
  entity logic_gates is
generic (delay : time := 10ns);
port (
       input1 : in std_logic;
       input2 : in std_logic;
       output : out std_logic
       );
end logic_gates;
 rules for writing port name: - port name consist of letters, digits, and underscores. - it always begins with a letter. - port name is case insensitive. modes of port in input port out output port inout bidirectional port buffer buffered output port 2. architecture architecture is the actual description of the design, which is used to describe how the circuit operates. it can contain both concurrent and sequential statements. architecture declaration an architecture can be declared using the following syntax: 
architecture architecture_name of entity_name is
begin
   (concurrent statements )
end architecture_name;
 example: 
architecture synthesis of andgate is
begin
          c <= a and b;
end synthesis;
 3. configuration a configuration defines how the design hierarchy is linked together. it is also used to associate architecture with an entity. configuration declaration 
configuration configuration_name of entity_name is
--configuration declarations
for architecture_name
  for instance_label : component_name
     use entity library_name.entity_name(architecture_name);
end for;
--
end for;
end [configuration] [configuration_name];
 example: 
configuration demo_config of even_detector_testbench is
    for tb_archi
       for uut : even_detector
          use entity work.even_detector (sop_archi);
        end for;
    end for;
end demo_config;
 types of modeling styles in vhdl there are 4 types of modeling styles in vhdl: 1. data flow modeling (design equations) data flow modeling can be described based on the boolean expression. it shows how the data flows from input to output. it works on concurrent execution. 2. behavioral modeling (explains behaviour) behavioral modeling is used to execute statements sequentially. it shows that how the system performs according to the current statement. behavioral modeling may contain process statements, sequential statements, signal assignment statements, and wait statements. 3. structural modeling (connection of sub modules) structural modeling is used to specify the functionality and structure of the circuit. structural modeling contain signal declarations, component instances, and port maps in component instance. vhdl objects vhdl uses the following three types of objects: 1. constants constant is an object which can only hold a single value that cannot be changed during the whole code. example: constant number_of_bytes integer:=8; 2. variables a variable also holds a single value of a given type. the value of the variable may be changed during the simulation by using variable assignment operator. variables are used in the processes and subprograms. variables are assigned by the assignment operator ":=". example: variable index: integer :=0; 3. signals signals can be declared in architecture and used anywhere within the architecture. signals are assigned by the assignment operator "<=". example: signal sig1: std_logic; sig1 <= '1' data types in vhdl data types are the abstract representation of stored data. there are the following data types in vhdl - 1. scalar types integer integer data types are the set of positive and negative whole numbers. floating point floating point data types are the set of positive and negative numbers that contain a decimal point. enumeration enumeration data type is used to increase the readability of the code. physical physical data type describes objects in terms of a base unit, multiples of base unit, and a specified range. 2. composite types arrays arrays are used to hold multiple values of the same types under a single identifier record records are used to specify one or more elements, and each element has a different name and different type. vhdl operators vhdl operators are used for constructing the expressions. there are the following types of operators in vhdl: 1. logical operators logical operators are used to control the program flow. when the logical operators combined with signals or variables, then it is used to create combinational logic. vhdl supports the following logical operators: and or nand nor xor xnor not 2. relational operators in vhdl, relational operators are used to compare two operands of the same data type, and the received result is always of the boolean type. vhdl supports the following relational operators: = equal to /= not equal to < less than > greater than <= less than or equal to >= greater than or equal to 3. arithmetic operators arithmetic operators are used to perform arithmetic operations. these operators are numeric types, such as integer and real. vhdl uses the following arithmetic operators: + addition - subtraction * multiplication / division & concatenation mod modulus rem remainder abs absolute value ** exponentiation 4. shift operators in vhdl, shift operator is used to perform the bit manipulation on the data by shifting and rotating the bits of its first operand right or left. vhdl supports the following miscellaneous operators: sll shift logical left srl shift logical right sla shift arithmetic left sra shift arithmetic right rol rotate left ror rotate right note: operators are evaluated in order to their precedence. (i.e., highest to lowest) highest precedence order lowest arithmetic operator shift operator relational operator logical operator the operator of equal precedence is evaluated from left to right. install the xilinx ise tool there are the following steps to install the xilinx ise tool - step1: click on the below link to download the xilinx ise tool. https://www.xilinx.com/support/download/index.html/content/xilinx/en/downloadnav/design-tools/v2012_4---14_7.html step2: now go to ise design suite - 14.7 full product installation and select full installer for windows 7/xp server (tar/grip - 6.18 gb) as shown in the below screenshot. step 3: once you click on the "full installer for windows 7/xp/server", you will see that a xilinx sign in page appears. if you do not have an account of xilinx, then click on the create your account. step 4: fill the information in the registration page then click on the create account. step 5: after clicking on the create account, the following window appears. step 6: now, you will receive a mail on your registered e-mail id which contains an activation link. click on the link to activate your account. step 7: once you click on the link, a sign in to activate account window appears in the window, in which enter your username and password, then click on the sign in. step 8: now click on the below link for the name and address verification. https://www.xilinx.com/member/forms/download/xef.html?filename=xilinx_ise_ds_win_14.7_1015_1.tar step 9: after completing the verification form, click on the next. step 10: now, you can see that the xilinx_ise tar file is started to download. step 11: double click on the downloaded file and extract the file to run xsetup.exe. step 12: once you run the application, the following welcome window appears on the screen. step 13: tick on the i accept and agree to the terms and conditions above and also tick on the i also accept and agree to the following terms and conditions then click on the next. step 14: now, select the listed product to install. for vhdl, select the ise webpack, which is the free version of the software. after selecting the ise webpack, click on the next. step 15: the installation options window appears. in this window, click on next. step 16: select the destination directory, then click on the next. step 17: you can see the summary of the installation in the below screenshot. click on the install to install the xilinx. step 18: you can see that installation is in progress. step 19: once the installation is completed, click on the finish. step 20: fixing project navigator, impact, and license manager there are the following steps to fixing project navigator, impact, and licence manager. go to the c:\xilinx\14.7\ise_ds\ise\lib\nt64 and rename libportability.dll to lib.portability.dll.orig. copy and paste libportabilitynosh.dll in the same directory, and rename it to libportability.dll. copy libportabilitynosh.dll and paste it into the c:\xilinx\14.7\ise_ds\common\lib\nt64 in c:\xilinx\14.7\ise_ds\common\lib\nt64 rename libportability.dll to libportability.dll.orig. in c:\xilinx\14.7\ise_ds\common\lib\nt64 rename libportabilitynosh.dll to libportability.dll. after completing the above steps, you can close the directory. step 21: now, you can see ide design suite appears on the screen. double click on the ide design suite, you can see the following pop up: step 22: now, the following window appears with a pop-up, click on the ok in the pop-up window. step 23: when you click on the licence, the following window will open in which select get my purchased licence (s) then click on the next. step 24: to connect with the default browser, click on the connect now. step 25: it opens a new xilinx page in the browse. on this page, enter username and password then click on the sign in. step 26: after clicking on the sign in, the following window appears. step 27: once you select the file, an e-mail is received in your registered e-mail id, which consists of a xilinx.lic file. you need to download this file. click on the load licence to upload the downloaded license file then click on the close. step 28: once the file is uploaded, a pop occurs with the message licence installation was successful, click on the ok in the pop-up and then click on the close. the below screenshot shows the licence is uploaded. step 29: now, you can create the projects in the xilinx tool. creating a project in vhdl using xilinx ide tool there are the following steps for creating a project in xilinx - step1: creating a new project to create the new project, select file -> new project. it will open a new project window on the desktop. in the new project window, give the project name that you want to create and specify the location (directory path) where you want to save the project, then click on the next. note: make sure that top-level source type is selected as the hdl, rather than schematic, edif, or other stuff. after clicking on the next button, the following window appears, which shows the project properties. fill the properties according to your requirements then click on the next. after clicking on the next button, the following window appears, which shows the project summary. if the project summary matches with your requirement, then click on the finish. otherwise, click on the back and fill property according to your requirement. step2: create vhdl source to add the vhdl source in vhdl, click on new source in the project wizard, or click on the project ->new source. type your file name, specify the location, and select vhdl module as the source type. make sure that the add to project check box is selected, then click on the next. step 3: assign the ports for vhdl source to design the half adder, you can assign a port name as a, b, sum, and cout. where for a and b are treated as the input ports, so select in from the drop-down menu. sum and cout are treated as the output ports, so select out from the drop-down menu. the following screenshot shows a summary of the project. step 4: enter and edit vhdl code the following screenshot shows the automatically generated half_adder code. to design the half_adder, enter the following code in the working area. step 5: synthesize the code when your source file is completed, you need to check the syntax of the design. to check the syntax, click on the synthesize-xst process to expand the hierarchy. now, double click on the check syntax. you can see that an ise compilation process is started. if the ise process completed successfully, a green checkmark appears. otherwise, a red x appears which show that there were errors and process failed. to see the basic design of half adder double click on the view rtl schematic. now you will see the following pop up in which click on the ok. in the create rtl schematic, select the project from the available list, and then click on the add button to move the selected project to the selected elements and click on the create schematic. now, you can see the external design of half adder on the screen. when you double click on the above rectangle, you can see the internal diagram using the logical gates. step 6: simulating behavioral model (ise simulator) to check the behavioral model, select the implementation-> half_adder- behavioral (half_adder.vhd) and double click on the simulate behavioral model. if the simulation is successful, the following window opens. to assign the value, right-click on the given values(u) then select force constant. consider the below image: the following pop up will occur in which you can assign the value of a, then click on the apply and ok. case 1: if input is: a = 0 b = 0 output: sum = 0 cout = 0 case2: if input is - a = 0 b = 1 output: sum = 1 cout = 0 case 3: input is - a = 1 b = 0 output: sum = 1 cout = 0 case 4: input is - a = 1 b = 1 output: sum = 0 cout = 1 vhdl vs. c language vhdl c language vhdl is a hardware description language. c language is a mixture of high-level language and assembly language. vhdl is synthesizable. c is not synthesizable. vhdl handles both sequential & concurrent instructions. c handles only sequential instructions. prerequisite before learning vhdl, you must have the basic knowledge of electronic circuits. audience our vhdl tutorial is designed to help beginners and professionals. problem we assure you that will not find any problem in this vhdl tutorial. but if there is any mistake or error, please post the error in the contact form. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me Â© copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
