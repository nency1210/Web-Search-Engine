https://www.javatpoint.com/plc::plc tutorial | programmable logic controller - javatpoint ⇧ scroll to top home plc java dbms ai blockchain html css javascript selenium ds java selenium jquery quiz projects comment forum plc tutorial plc tutorial plc: programmable logic controller plc or programmable logic controller is a computer control system for the automation industry. it is a special-purpose computer without a keyboard, hard drive, etc. plc is one of the demanding skills of the electrical industry. most organizations require a candidate having knowledge of plc. here, we will discuss automation, applications, types, programming, process, architecture, etc. in this tutorial, we will cover the following topic: what is plc why plc types of plc how plc works architecture of plc how smps converts voltage? programming device plc cycle what is a safety plc? what is automation? types of automation applications of plc criteria for selecting plc siemens plc plc protocols plc manufacturers plc programming symbols used in programming memory mapping in plc memory areas other components used in programming counters comparators examples automation tools plc vs. scada what is plc? plc is a digital computer control system adapted to control the robotic devices and other manufacturing processes. it involves a basic study of microcontrollers, digital circuits, and designing skills. it provides easy, flexible, high-reliability programmable controllers suitable for simple and harsh environments. it monitors the state of input devices, takes decisions, and controls the output devices. the applications include robotics, water filling tanks, etc. plc ranges from small devices with few input/outputs to large devices with thousand of input/outputs. thus, plc is all about: why plc? plc was initially created in the united states for the replacement of relay systems. the drawbacks of relays that make them unsuitable for the automotive industry are listed below: the machine operation using relays logic was quite challenging and time-consuming. a change in the logic of the machine makes the process complicated. relays also fail quickly compared to computer components. it requires more run downtime. relay also consumes plentiful electricity, more space, and heat. hence, to overcome such drawbacks, plc was created. a plc model has a simple appearance. the essential components of plc are input/output (i/o) modules, co-processor modules, cpu, and peripheral devices. the cpu (control processing unit) communicates with the input/output. the i/o modules may be present near or farther away from the cpu. hence, plc is not limited to one building. it includes calculation in the programming, which is used to calculate different parameters, such as spc (statistical process control). but for its operation, we need to program the programmable logic controller. most plcs are controlled using the applications on the desktop/laptop. these applications communicate with the plc using the communication medium, such as ethernet or the proprietary communication bus. the selection of communication medium depends on the manufacturer. most manufactures also rely on the usb. the specific logic is different for each programmer with different techniques of doing the same thing. types of plc there are three types of plc, which are shown below: modular plc in modular plc, modular means adding modules. it allows us to expand the structure of plc. it is useful when there are a large number of inputs and outputs. we can add more input and outputs by adding the modules in the plc. it also has more memory and capability to store information. the example includes control processing lines in the manufacturing industry. let's have a look at the modular type plc. rack plc the modules in the rack type plc are arranged in the rows. the racks are placed inside the cabinets. the slots in the rack plc communicate with each other connected by the standard network or bus. let's have a look at the rack plc. compact plc the input / output (i/o) modules in the compact plc are determined by the manufacturer of that plc. it means that the i/o is fixed. but, the compact plcs are used for small scale applications. let's have a look at the compact plc. how plc works in simple words, plc takes the input from the input devices, processes it based on the logic in the cpu, and controls the output devices based on that logic. plc is lightweight and can operate without any electrical filtering or air conditioning. let's discuss this in detail. the devices such as pushbutton, sensors are connected as the input devices, which can detect a change in the input signals in the plc. the input signal passes through the barrier that converts the voltage into low voltage, such as 5v. the cpu monitors the state of the input. based on the specified logic, cpu processes and produces the output signal. the barrier present at the output terminal prevents the plc from external noise and converts the low voltage to high voltage to drive output devices. the output signal controls the output devices, such as motor, controllers, pilot lights, etc. architecture of plc the plc hardware setup or architecture contains the hardware and software that is used to perform the control functions. let's have a look at the architecture of the plc. the components of the plc are listed below: ps ps stands for power supply. the power supply acts as a power source for the plc system. it converts the high voltage into low voltage or dc, such as 120v ac to 24v dc. the linear power supply is less complicated than the other modes of power supply. smps it stands for switch mode power supply. smps is power conversion and a high-frequency power conversion device. it converts the voltage level into the specifically required voltage. smps uses solid stat switches to convert the ac supply into the smooth dc supply. smps is generally used for high power conversion from ac to dc. it also has high efficiency than ps. let's discuss some differences between ps and smps. consider the below table. category ps (power supply) smps (switch mode power supply) weight bulky light in weight efficiency low efficiency between 20 % to 25% high efficiency between 60 % to 65% complexity less complex more complex response faster response slower response uses radio frequency applications mobile chargers, dc motors, etc. how smps converts voltage? let's consider the ac voltage of 224v. the process will convert 224v ac to 24v dc. consider the block diagram given below: it clearly explains the process of converting high voltage to low dc voltage. cpu cpu or central processing unit is present in the central rack of the plc. the data bus is used as a medium to send data between different elements in the plc. it controls all functions, such as programmed instructions stored in the memory of plc. it also controls logic, communications, and monitoring in the plc. it is the unit of the plc that contains a microcontroller or microprocessor. the cpu executes the program when it is operated in the run mode. im im or interface module is defined as an accurate, position sensing, and absolute device. it is commonly used with transducers to reduce noise in harsh environments. programming device we need to specify the required program into the processor's memory. the program is initially developed in the programming device. after that, the program is transferred to the memory unit of the plc. cp cp stands for communication process. the communication process in plc includes a wiring system and a shared protocol. the wiring system is used to connect different components in plc, whereas shared protocol allows any device to understand the bits and bytes in the communication process. mcb mcb or miniature circuit breaker acts as a safety device for the plc. it automatically switches off the circuit if an overload or fault condition arises. mcb is commonly used instead of fuse i low voltage electrical network. input module the input module of plc detects the input devices' status, such as sensors, switches, push-buttons, etc. output module the output module of plc controls the output devices, such as motors, relays, lights, etc. rack the rack usually acts as a holding device of plc. it means that it holds everything together. we can add racks in the plc to hold more modules. the racks are also available in a different size. memory unit memory unit is the unit that stores programs, data, and information in the plc. the plc has two types of the memory unit, which are listed below: data memory: the data memory consists of the stored data from the input/output modules of the plc. program memory: the program memory consists of the logic program or ladder logic program in the plc. plc cycle the plc system is often expensive. the incorrect programming or design of plc can result in loss of productivity. to save the time to design of plc control applications, simulation software like plclogix are recommended. such software saves time and also increases the safety associated with the plc equipment. the plc cycle is shown below: know your process: we should know our process that we are starting with. circuit design: the design is the first part of any project. a project or model cannot be created without design. devices used: it is crucial to know the devices used in the project. programming: it is an essential part. the created model is programmed for implementation. testing or simulation: at the final stage, the model is tested. considerable time is spent on testing and simulation. the above steps are necessary to understand the operation of the plc. scan cycle of plc the plc continuously scans the process because the inputs are random (can change any time). the scan cycle is divided into three parts, named input scan, output scan, and program execution. scan time: it is defined as the time taken by one cycle to go through the program. the time duration of a cycle is minimal, i.e., 1/1000th of a second. it can vary depending on the program. the lesser the scan time, the better and expensive will be the plc. the scan cycle is shown below: input scan: the plc solves the logic based on the specified inputs. the on/off state of the input is saved in the data table in advance, avoiding sudden changes in the input. it also makes the process faster. program execution: the control logic keeps the memory copy of the ladder logic program. it executes only one instruction at a time using that copy. output scan: it updates the outputs after the scan process is completed. the values of the program are temporary. based on such values, the output is updated. after that, it self-checks for any fault and restarts the process. what is a safety plc? the safety plc is similar to the normal plc with some extra safety features, such as redundancy. the safety plc can also perform additional field device checking, such as snooping. the plcs are part of the automation system, which is related to electrical engineering. a safety plc is one of the important of any automated industrial process. the sensors, plc (logic solver), and the control systems are considered the three parts of the sis (safety instrumented system). sis is termed as safety shutdown system. the sis monitors a process and reacts by making a shutdown if any unsafe or risk condition arises. the role of safe plcs is to guard the process against project/plant failures to prevent the environment from harsh risks. in any hazardous condition, safety place will place the plant in a safe condition. what is automation? automation is defined as a process, system, procedure that reduces human efforts to a minimum. it is a mechanical device that operates and functions automatically without continuous input. the devices are created electronically. the scope of automation is increasing like other technologies, such as machine learning and artificial intelligence. for example, aircraft, boilers, heat treating ovens, automatic machinery, etc. let's discuss some features of automation. automation has not only reduced human labor but also uses machinery for repetitive tasks. industrial automation has resulted in increased productivity, safety, better utilization of resources, improved production rate, and higher output. it has increased consistency. time-saving procedure. better reliability reduced cost of operations. more safety and job security. plc has replaced sequencers and timers. i/o scanning the automation is categorized as industrial and non-industrial automation. types of automation let's have a quick look at the types of automation. there are four types of automation, which are listed below: fixed automation flexible automation programmable automation integrated automation fixed automation fixed automation has an open and logic-based programming system. but, it has a high production rate and high initial investment. flexible automation the flexible automation is quite flexible in dealing with the products having design variations. programmable automation it is a human-based system. here, the new program is prepared and enters into the new equipment to create new products. integrated automation it is the combination of the above three automation (fixed, flexible, and programmable). it is an industrial control system that extends its technical services in the engineering domain. applications of plc we generally use a desktop or laptop for programming. some of the applications of plc are listed below: controlling elevators controlling traffic signals washing machines amusement rides machinery control bottle filling system water tank level control criteria for selecting plc it is essential to select the best plc. let's discuss the criteria for selecting a plc. we should select any plc based on the following parameters: system requirements the required plc should be compatible with the system requirements of our computer or laptop. we should always check the plc model. scan time it is also an essential part of selecting any plc. the plc will less scan time is considered as the best plc, but are costly. the variation of scan time depends on the number of inputs of the plc. communication communication means sharing information with other devices. the hardware cable can be twisted pair cables, radio modem, etc. speed of operation it defines the operating speed of the control system of the plc. application requirements it determines the input and output requirements for the plc system. electrical requirements the electrical requirements include the parameters, such as input voltage, control system's power, output current, and output voltage. i/os the i/o modules should be selected according to the required project needs. if we want to control the stepper motor, we can opt for a rack plc. memory we need first to check the required amount and size of the memory. the memory of the plc is related to the number of i/o, the installation of the control program, etc. software requirements the software requirements include compatible cpu, communication and i/o ports, usb port, ethernet port, user-specified port, etc. physical requirements we should always consider the location of the plc control system. we should place the plc control system in ip-rated closure in the harsh environments. other parameters, such as maintenance, accessibility, and troubleshooting, should also be kept in mind before selecting any plc. siemens plc as discussed, siemens plc is the most common plcs used all over the industries. the siemens plc are divided into three generations, which are given below: 1st generation - micro 2nd generation - mini 3rd generation - nano or rack plc the series of siemens plcs are listed below: s7200 s7300 s7400 s7400h s7400f s71200 s71500 s7400f plc also has the feature of fault tolerance. we can select the product as per the requirement. s7200 is the cheapest available siemens plc. it is easy to start programming with the s7-200 plc. simatic step 7 simatic step 7 is the powerful automation software tool, which includes the programming environments for siemens plcs. the simatic step 7 engineering software can be used for programming and configuring hmi basic panels. the supported programming languages in the step 7 software are ladder programming, functional block diagram, and structured text programming language. today, the intelligent choice for automatic is the simatic s7-1200 controllers. let's understand the advantages of s7-1200 controllers, which are listed below: these plcs are available in failsafe and standard versions. it comes with extended communication functions and improved data transfer. it allows the transfer of sensitive machine data. it supports predictive maintenance. it also supports data transfer with other controllers. it enables data storage. plc protocols plcs communicate using the protocols. the protocols associated with the plcs are listed below: 1. ppi the ppi or point to point interface protocol is a communication protocol specially designed for s7-200 plc. but, it is not directly opened by siemens. 2. mpi the mpi or multi-point interface protocol is an interface of the siemens company. the mpi is used to connect the devices, such as personal computers, etc. the speed of mpi ranges from 187.5 kbd (kilo baud) to 12 mega baud. 3. profibus process field bus or profibus uses a multi-drop single cable, which is used to connect the devices. it is often confused with the profinet. it is easy to find faults in a single cable. the installation cost of the profibus cable is also low. 4. profinet the process filed net or profinet is also used by siemens like profibus. the response time of profinet is faster, which provides higher data collection. 5. fiber optics cable the fiber optics cable supports high bandwidths level and high transmission capacity over long distances. 6. ethernet cable the ethernet cable acts as a wired transmission intermediate between the devices. ethernet cables are considered for wiring analog input and outputs in plc. the ethernet connection provides faster security and reliability than the wireless connection. 7. lan cable the lan cable provides the downloading and uploading capacity from the host computer to the plc or vice versa. the common lan applications include distributed control, etc. 8. cat 5, cat 6, and cat 7 here, cat stands for category. these are the common ethernet standards that are widely used for transmission with reduced interference. the speed of cat5 is upto 100mbps. the speed of cat6 is upto 10gbps. the speed of cat7 is upto 100gbps. it is the latest cable, which is shielded. twisted pair cables it is a kind of wiring system in which two pairs of conductors of a single circuit are twisted together to improve the electromagnetic capability of the circuit. plc manufacturers the industries that make plc are listed below: siemens it is the german multinational company that manufactures plc. it is well known and most used plc all over the world. rockwell automation it is an american company that also took over the allen bradley brand. it is the largest manufacturer of plcs and well known in the united states. abb the abb is a swiss multinational company that provides plcs within vast industries and applications. omron it is a japan-based electronics company. general elastic it is an american based plc company. delta it deals with all types of automation machines. it is a taiwan- based plc manufacturer. schneider the schneider is a french-based plcs manufacturer. mitsubishi it is a japanese mnc group that manufactures plc. koyo electronics corporation limited it manufactures the directlogic plc brand. it is a japanese based industry. plc programming plc programming is a crucial task of implementing and designing control applications as per the user requirements. it is the set of instructions that can be in the graphical or textual form. here, we will discuss the most commonly used method called ladder diagram, which is a type of graphical method. the plc works according to the specified program as soon as it is placed in the run mode. the programming is carried out in the plc software. here, we have discussed the software that is popularly used for siemens plc called simatic step 7. we can easily download it from any browser. the function blocks in the programming include push-button, counters, timers, comparators, etc. types we have discussed that the control logic establishes the input and output of a plc. the control logic of the plc can be programmed using different programming languages. out of all the programming languages, ladder is the most common programming language used for plc. so, we will discuss ladder programming in detail. the initial version of iec standard 61131-3 supports five basic programming languages called fbd, st, il, sfc, and ladder. the standard-based programming language to program plc is called the ladder diagram. st and il are the textual programming language, while ladder, fbd, and sfc are the graphical programming languages. . let's discuss six types of programming language, which are listed below: fbd (function block diagram) the functions in the fbd diagram are described as the set of elementary blocks. the variables (input and output) in the function block diagram are connected to blocks by the lines. st (structured text) the structured text is a block-structured language that is based on pascal. it is a high-level language. it is also a text-based language. il (instruction list) the instruction list is a text-based and a low-level language. sfc (sequential flow chart) the sequential flow charts are defined by the function of charts in a sequence. we can use it if the process can be divided into steps. sample program: ladder logic it is defined as a graphical programming language that uses symbolic notation for expressing the logical operations. we can program the plc on any software using the ladder logic. before beginning with the programming, let's discuss some basic concepts. push buttons the pushbuttons are the simple buttons to control the machine or a process. we are required to push the button to change its electrical state from on to off or vice-versa. push buttons are further categorized as no (normally open) and nc (normally closed), as shown below: nc: the normally close is the default state of a circuit that makes electrical contact with the circuit. it means the circuit is in on state. no: the normally open is the state of a circuit that makes no electrical contact with the circuit. it means the circuit is in the off state. it opens the terminal of the circuit to interrupt the flowing current. we will use pushbuttons for programming in plc. symbols used in programming various symbols are used to create a ladder circuit for plc programming. let's consider some essential symbols. the symbols are shown below: let's first discuss the concept of no and nc. we will also discuss the output of no and nc buttons when the input is 0 or 1. no the no button turns nc when it is pressed. it means, when the input is 1, no turns nc. it means the current can pass through. consider the below image: it clearly shows that when the input is 0, no remains no. it turns nc when the input is 1. nc the nc button remains the same when the input is 0. it turns no when the input is 1. consider the below image: we can arrange no and nc in parallel or series according to the requirements. now, we will discuss the logic gates with their ladder diagram. the concept of using no and nc in a ladder diagram will help us in building the circuits of plc. the ladder diagram of logic gates are discussed below: logic gates we will discuss logic gates with their circuit using no and nc buttons. basic gates the basic gates are and, or, and not. the truth table of or and and gate is given below: a b or and 0 0 0 0 0 1 1 0 1 0 1 0 1 1 1 1 the truth table of not gate is given below: a not 0 1 1 0 ladder diagram of and gate the ladder diagram of and gate is given below: here, a and b are the inputs, while l is the lamp. the lamp will glow when the current flows through the circuit and reaches the lamp. otherwise, the lamp will not glow. when a = 0 and b = 1, the circuit will appear as: the lamp will not light because the starting button is off. the current will not flow. but, if a = 1 and b = 1, the circuit will appear as: here, the lamp will light. hence, the condition of the and gate is satisfied. similarly, we will create a ladder diagram for all the gates using the same logic, as discussed above. ladder diagram of or gate the ladder diagram of or gate is given below: when a = 0 and b = 1, the circuit will appear as: when a = 1 and b = 1, the circuit will appear as: ladder diagram of not gate the ladder diagram of not gate is a simple nc. it will give output 1 if the input is 0 and vice versa. if the input is 0, the circuit will appear as: if the input is 1, the circuit will appear as: the lamp will not light because nc will become no. universal gates the universal gates are nand and nor. the truth table of nand and nor gate is given below: a b nor nand 0 0 1 1 0 1 0 1 1 0 0 1 1 1 0 0 ladder diagram of nand gate the ladder diagram of nand gate is given below: when, a = 1 and b = 0, the circuit will appear as: here, the lamp will light. if a = 1 and b = 1, the lamp will not light because both nc will become no. hence, the condition is satisfied. ladder diagram of nor gate the ladder diagram of nor gate is given below: when, a = 1 and b = 0, the circuit will appear as: here, the lamp will not light because the first nc will become no. if a = 0 and b = 0, the lamp will light because both nc will remain the same. hence, the condition is satisfied. exclusive gates the exclusive gates are xor and xnor. the truth table of ex-or and ex-nor gate is given below: a b xor xnor 0 0 0 1 0 1 1 0 1 0 1 0 1 1 0 1 for xor 
y= (a⨁b)
y= (a' b+ab')
 for xnor 
y= (a⨁b)'
y= ((ab)'+ab)
 ladder diagram of xor gate the ladder diagram of xor gate is given below: when a = 0 and b = 1, the circuit will appear as: here, the lamp will light. but, if a = 1 and b = 1, the circuit will appear as: here, the lamp will not light because both the nc of the circuit becomes no. hence, the condition is satisfied. ladder diagram of xnor gate the ladder diagram of xnor gate is given below: when a = 0 and b = 1, the circuit will appear as: the lamp will not light. the circuit is incomplete for the current to flow. but, if a = 1 and b = 1, the circuit will appear as: here, the lamp will light. hence, the condition is satisfied. memory mapping in plc the memory mapping in plc is discussed below: 1 byte = 8 bits. 1 bit = 0 or 1 2 bytes = 2 x 8 = 16 bits = 1 word 4 bits = nibble 2 word = 32 bit = 4 byte = 8 nibble = 1 double word the memory is divided into program, words, and discrete registers. program: the program is created using functional blocks and symbols. the functional blocks, functions, and blocks can be programmed using five programming languages, as discussed above. words: 1 word = 16 bits. discrete registers: the 1-bit registers that can be used as input are considered as discrete registers. the 16-bit registers that can be used as input are considered as input register. consider the partial memory map for the plcs, which is shown in the below table: file no. file type addressing range 0 output image o:0 to o:30 1 input image i:0 to i:30 2 status s:0 to s:n 3 binary b3:0 to b3:255 4 timers t4:0 to t4:255 5 counters c5:0 to c5:255 6 control r6:0 to r6:255 7 integer n7:0 to n7:255 8 floating-point f8:0 to f8:255 memory areas the memory areas in plc are categorized as load memory, work memory, and retentive memory. load memory it is a type of non-volatile memory. it contains the memory and the data blocks, code blocks, and the configuration of the hardware. work memory it is a type of volatile memory. it contains the memory and the data blocks. the work memory is only used in the cpu operation, and cannot be extended. retentive memory it is a type of non-volatile memory. it saves a limited amount of data in case of a power failure. but, certain actions like memory reset and factory settings reset can cause the deletion of memory objects of the retentive memory. other components used in programming other components used in the programming are listed below: timers the timers in plc provides the on and off time delay like electronics relays. for example, a timer of 5s is placed in the ladder circuit. the output will be off/on after duration of 5 seconds. the timers are categorized as on timer, off timer, and pulse timer. on timer the output in on timer is turned on after the specified delay. it is the most commonly used delay timer. the on timer is represented as the figure shown below: we can represent the time in two ways called seconds and milliseconds. for example, t # 5s_200ms t#3s where, s means seconds and ms means milliseconds the parameters in the on timer are listed below: timer number: file name time base: time shown as a base. here, it is shown in seconds preset value: specified delay time accumulated value: value becomes 0 when the timer is reset. it starts the timer counting from 0. the output of the ladder diagram is turned on when accumulated time becomes equal to the preset time. how on timer works? when the condition or the logic diagram becomes true, the timer starts counting. it counts until the specified delay time. for example, if the delay time is 10 seconds, the timer will count upto 10 seconds. the counting appears in the accumulated value section. as soon as the value of the accumulated section becomes equal to the preset value (specified value), the logic operates (true) and turns the output on. consider the below graph: off timer the output in the off timer is turned off after the specified delay. it is represented as the figure shown below: the parameters in the off timer are similar to the parameters of the on timer. the output of the ladder diagram is turned off when the accumulated time becomes equal to the preset time. how off timer works? when the condition or the logic diagram becomes true, the timer starts accumulating. it counts until the accumulated value becomes equal as the specified present value. as soon as the value of the accumulated section becomes equal to the preset value (specified value), the output becomes false and turns the output off. consider the below graph: s_pulse timer the pulse timer is used to generate pulses. it generated pulses of the specified length. the pulse timer is shown below: the parameters of the s_pulse timer are discussed below: s: it means set. it is defined as the trigger signal of the timer. tv: it means the timer value stored in the timer. the time value is represented as s5t#tv, where tv is the specified time value. let's consider an example: s5t#10s here, 10s is the time specified in seconds. r: it means reset. it is defined as the reset signal of the timer. q: it is the output of the pulse timer. bi: it represents the current time in the binary code. bcd: it represents the current time in the binary coded decimal. the time is specified in the form of s5t#5s. where, 5s is the specified time in seconds. to set the time as 10 seconds, we will declare it as s5t#10s. how does pulse timer work? the set input (s) of the timer becomes active when it receives a positive pulse. the timer is in running state as long as the input is '1'. when the input changes its state from 0 to 1, the output is enabled. the timer keeps running until the accumulator value reaches the preset value. we can read the accumulator value at the bi and bcd output of the pulse timer. consider the below graph: s_odt here, odt stands for on delay timer. the timer runs as long as the input state of the signal is positive. the s-odt timer is shown below: the parameters of the s_odt timers are similar to the s_pulse timers. s-odts here, odtr stands for on delay timer. it is a type of retentive on-delay timer. the timer starts when the set state of the timer is positive. the timer restarts when there is a change in the state from 0 to 1. the s-odts timer is shown below: let's consider the graphs of s_pulse, s_odt, and s_odts timers, which are given below: here, tv represents the specified timer value. counters the counters are categorized as step-up, step-down, and step-up-down. step-up counter the up-counter is used for counting up. the functional block of the up-counter will appear as the figure shown below: the parameters of the functional block are discussed below: cu: it determines the input state of the counter. r: it means reset. it is defined as the reset signal of the counter. pv: it is defined as the limit of the counter. q: it means output. cv: it is defined as the current counter value. the count value in the counter is represented as c # 10. the counter will count serially till 10 pulses. how it works? each pulse on the input of the counter will increase its current value by 1. the output (q) comes in the set state when the current counter value is equal or greater than the counter limit. a pulse on the reset (r) will reset the state of the counter. it means that the current counter value of the counter will become 0. step-down counter the down-counter is used for counting down. the functional block of the down-counter will appear as the figure shown below: the parameters of the block are discussed below: cd: it determines the input state of the down counter. ld: it is called the load input. pv: pv means the limit of the counter. q: it means output. cv: it is defined as the current counter value. how does it work? each pulse on the input of the down-counter will decrease its current value by 1. it means that the counter value will decrement by 1. the output (q) comes in the set state when the current counter value is equal or less than 0. a pulse on the load input (ld) determines the counter limit value (pv). the value of the counter limit is further assigned to the cv (current counter value). step-up-down counter the up-down counter can be used for counting in both ways. we can set the up and down limit of the same number using the up-down counter. the functional block of the up-down counter will appear as the figure shown below: the parameters of the block are discussed below: cu: it determines the input state of the up counter. cd: it determines the input state of the down counter. r: it means reset. it is defined as the reset signal of the counter. ld: it is called the load input of the down counter. pv: it is defined as the limit of the counter. qu: it means output of the up counter. qd: it means output of the down counter. cv: it is defined as the current counter value. how does it work? each pulse on the input of the up-counter will increase its current value by 1. each pulse on the input of the down counter will decrease its current value by 1. the output (qu) comes in the set state when the current counter value is greater or equal than the counter limit (pv). the output (qd) comes in the set state when the current counter value is equal or less than 0. a pulse on the reset (r) will reset the state of the counter. it means that the current counter value of the counter will become 0. a pulse on the load input (ld) determines the counter limit value (pv). the value of the counter limit is further assigned to the cv (current counter value). comparators the comparators are used to compare two values. we can also compare physical quantities such as pressure, temperature, etc. using comparators. the types of values that can be compared using comparator are equal, greater than, less than, not equal, check the validity, and check invalidity. the value in comparators is represented as: equal comparator: cmp = = 1 here, one is the value being compared to. it is used to determine if the first value is equal to a second value or not. similarly, not equal is used to determine if the first value is not equal to the second value. the equal comparator is represented as the figure shown below: greater or equal comparator: cmp > = 1 it is used to determine if the first value is greater than or equal to the second value or not. less or equal comparator: cmp < = 1 it is used to determine if the first value is less than or equal to the second value or not. less than comparator: cmp < 1 it is used to determine if the first value is less than the second value or not. greater than comparator: cmp >1 it is used to determine if the first value is less than the second value or not. now, we have discussed about timers, comparators, counters, and pushbuttons. let's implement these in the ladder diagram. it will make to clearly understand the concept of the ladder diagram and the components used in it. consider the below examples. examples example 1: we have three pushbuttons. if a, b, and c are pressed, the red led goes on. if a and b are pressed, the green led goes on. it means that only one led is on at a time. solution: given: here, there are two leds: green and red. at a time, one led light. it can be either green or red. push buttons: a, b, c we will create a ladder diagram based on the above logic. the ladder diagram is shown below: here, we have inserted both no and nc of the same button 'c' in the ladder diagram. when we press a no button, it turns nc. when we press nc button, it turns no. when we press the c button, we are pressing both the no and nc of button c. let's start. case 1: press all a, b, and c buttons together. the circuit will now appear as: here, the red led will light, as shown above. note: the above symbols are colored only for a better understanding. case 2: press only a and b button. nc always allows the current to pass through the circuit. it only becomes no, when we press it. the circuit will now appear as: here, the green led will light. since, the c button was nc, it also allows the current to pass. example 2: we have four push buttons. when a, b, and c are pressed, output goes on. when c and d are pressed, the same output goes on. solution: given: here, there are four pushbuttons: a, b, c, and d. but here, we have only one output. we will create a ladder diagram based on the above logic. the ladder diagram is shown below: here, we have used no (normally open) for all the four push buttons. if we want, we can also add nc for the d button in series with the three (a, b, c) push buttons. it will have no change in the output. let's start. case 1: press a, b, and c buttons. the circuit will now appear as: case 2: press c and d button. the circuit will now appear as: since a and b push buttons were off, the output goes on from the lower series of c and d buttons. example 3: we have four inputs. input 1 turns output 'a' on. input 1, 2, 3, and 4 turns output 'b' on, while input 1 and 2 turns on output 'c' on. solution: given: here, there are four inputs (1, 2, 3, and 4) and three outputs (a, b, and c). we will create a ladder diagram based on the above logic. the ladder diagram is shown below: let's start. case 1: press input 1. the circuit will now appear as: here, output a goes on. case 2: press all the inputs. the circuit will now appear as: we have pressed all the four inputs (1, 2, 3, and 4). here, output b goes on. as input 2 on the first row and input 3 on the third row is nc. so, pressing them will block the current flow. case 3: press input 1 and 2. the circuit will now appear as: input 3 is nc. so, it allows the current to reach output c. hence; output c goes on. example 4: we have three inputs and three leds as an output. when we press button a and b, the red led turns on. when we press button a b, and c, the green led turns on. when we press button b and c, the yellow led turns on. solution: given: here, there are three inputs (a, b, and c) and three outputs as led (red, green, and the yellow). we will create a ladder diagram based on the above logic. the ladder diagram is shown below: let's start. case 1: pressing button a and b. the circuit will now appear as: here, red led will light. case 2: pressing all the buttons. the circuit will now appear as: a is an nc button in the third row, which on pressing blocks the current flow. hence, the green led will light. we can also insert nc of the b button instead of the a button in the third row. according to the question, we can set the no and nc as per our choice. but, it should not have any adverse impact on the output. case 3: pressing button b and c. the circuit will now appear as: now, we will discuss some examples of timers and counters. example 4: there are two motors (1 and 2). motor 1 becomes on by pressing the start button. but, when the stop is pressed, it becomes off, and motor 2 is on for 10 seconds. solution: given: here, there are two motors. there is the use of time duration in seconds. hence, timers will be used. we will create a ladder diagram based on the above logic. the circuit implementation using the timers, etc. is quite difficult than normal circuits. here, we will use the pulse timer. we will draw the three ladder diagrams. the above process is explained step by step. let's start. step 1: first ladder diagram the first ladder diagram is shown below: here, 'q 0.0' is the output of the first ladder. the output 'q 0.0' parallel with the 'i 0.1' button acts as a buffer for the circuit. 'i 0.1' is the start button. the output of the circuit is considered as the output of motor 1. working: when we press the start button, motor 1 becomes on. the circuit after pressing the start button will appear as the image shown below: step 2: second ladder diagram the second ladder diagram is shown below: where, 'i 0.2' is the stop button. working: when we press the 'i 0.2' button, it will turn on the output i 0.0, which is an nc for the first ladder diagram. the nc 'i 0.0' is a pressed button, which will block the current flow in the first ladder diagram. it will further turn off the motor 1. the circuit after pressing the stop button will appear as: the first ladder diagram appears as: step 3: third ladder diagram the third ladder diagram is shown below: q 0.1: output of the motor 2. working: when we press the 'i 0.2' button, it will turn on pulse timer. the timer will go on the output q 0.1. the output will remain on for the specified duration of 10 seconds. when the counting in the accumulator becomes equal to the preset value (10), timer stops. hence, all the conditions are satisfied according to the question. similarly, we can create the logic diagram for other questions as well. step 4: full circuit the full circuit with three ladder diagrams is shown below: note: if we want to on any device after 10 seconds, we must use the s_odt timer. automation tools the automation tools are ann (artificial neural network), dcs (distributed control system), hmi (human machine interface), scada (supervisory control and data acquisition.), and plc (programmable logic controller). let's discuss the main differences between plc and scada. scada scada or supervisory control and data acquisition is a software used to control and monitor an industrial process accomplished by the plc. it is generally used for high-level process management systems and analyzing real-time data. scada is mostly used in combination with the plc, and other devices. the function of scada is to control the entire system, while the role of plc is to act as controller points for specific assets. scada includes several components, due to which it possesses greater capability than plc. plc and scada are used in the automation industry, such as oil and gas, energy, waste control, transportation, water control, etc. plc vs. scada the differences between plc and scada are listed below: plc scada it stands for programmable logic controller. it stands for supervisory control and data acquisition. it comprises cpu, i/o modules, and the peripheral devices. it comprises of computers, gui (graphical user interface), and networked data communications. it is hardware. it is software. it is a system that controls motors and complex machines. it is a system to run and monitor the plant processes. it is a hardware device that can be of various types, as per the requirements. it consists of several components that increase its capability. for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me © copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
